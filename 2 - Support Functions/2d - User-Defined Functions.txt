/*
################################################################################
## USER-DEFINED FUNCTIONS ######################################################

Allows the other systems to get up to speed quickly.



================================================================================
== @startup ====================================================================

I'm leaving this commented out, but if you allow objects to use @function, use 
this. Else, remember to have your function-creation object read here.
*/
@startup [v( d.sfp )]=
	@dolist lattr( %!/ufunc.* )=
		@function/preserve [rest( ##, . )]=%!/##; 
	@dolist lattr( %!/ufunc/privileged.* )=
		@function/preserve/privileged [rest( ##, . )]=%!/##
/*


================================================================================
== statpath([<player>/]<stat>) ================================================

USER-DEFINED FUNCTION: STATPATH()

This function is simply an API-like function that allows a staffer-project to 
pull the raw "where would I find this stat" via the statname-lookup functions, 
and do some additional error checking.

0: As passed, will be broken apart.
Output: Full stat path or #-1 or whatever (via f.statpath.workhorse).

qp: Player to check.
qs: Stat to check.

--------------------------------------------------------------------------------
*/

@fo me=&ufunc/privileged.statpath [v( d.sfp )]=
	u\\( [num( sfp )]/f.statpath, \\\%0 \\)

// -----------------------------------------------------------------------------

&f.statpath [v( d.sfp )]=

// Prime the registers. If it hurts your brain, it hurts mine too.
	[setq( s, )][setq( p, )]
	[setq( s, 
		if( 
			t( setr( s, rest( %0, / ))), 
			%qs[setq( p, before( %0, / ))], 
			%0 
		)
	)]

// Validate Input
	[case( 
		0, 
// .. staff-only
		isstaff( %@ ), 
		#-1 STAFF ONLY, 
// .. must have a stat to look up
		comp( %qs, ), 
		#-1 NEED STAT TO LOOK UP,  
// .. else call the Workhorse. If it hurts your brain, tough.
		ulocal( f.statpath.workhorse, %qs, %qp )
	)]


/*
--------------------------------------------------------------------------------
-- Statpath Workhorse ----------------------------------------------------------

0: Stat to check.
1: Player dbref of target, if any
Output: Full stat path or #-1 Whatever

qp: Dbref of player's sheet

--------------------------------------------------------------------------------
*/

&f.statpath.workhorse [v( d.sfp )]=
	strcat( 

// set %qp to sheet dbref, if there's any to set
		setq( p, 
			if( strlen( %1 ), 
				u( f.find-sheet, u( .pmatch, %1 ))
			)
		), 

// if target passed & found, do 'sheet lookup', else do 'dd lookup'
		if( setr( s, ulocal( f.statpath-lookup-sheet, %qp, %0 )), 
			%qs, 
			ulocal( f.statpath-lookup-dd, %0 )
		)
	)



/*
================================================================================
== statname([<player>/]<stat>) =================================================

0: same as f.statpath
output: prettified Just-The-Stat-Name

qr: results of f.statpath

--------------------------------------------------------------------------------
*/

@fo me=&ufunc/privileged.statname [v( d.sfp )]=
	u\\( [num( sfp )]/f.statname, \\\%0 \\)

// -----------------------------------------------------------------------------

&f.statname [v( d.sfp )]=
	if( 
		t( setr( r, u( f.statpath, %0 ))), 
// .. dd stat: send the name portion of the statpath
		u( f.statname.workhorse, rest( %qr, . )), 
// .. error: show what f.statpath handed us
		%qr 
	)


/*
--------------------------------------------------------------------------------
-- Statname Workhorse ----------------------------------------------------------

0: The "rest" of the statpath (that is, just the name portion)

*/

&f.statname.workhorse [v( d.sfp )]=
	iter( 
// .. Step 1: Capitalize Words
		edit( %0, _, %b ), 
// .. Step 2: Capitalize Substats
		titlestr( %i0 ), 
		., 
		. 
	)


// -----------------------------------------------------------------------------
// -- Statname Tests -----------------------------------------------------------

think iter( iter( edit( a_b.c_d, _, %b ), capstr( ## ), ., .), capstr( ## ))

think statname( str )
think statname( cont (dod).rep )
think statname( thenomain/cont (dod).rep )
think statname( un( v ))
think statname( blah )




/*
================================================================================
== getstat(<player>/<stat>[, <statstuff>]) =====================================

Getstat is checked against f.statpath, which gets us 2/3rds of what we need.

<statstuff>: 
- [p]ermanent: return the first part, if numeric
- [o]ffset: return the second part, if first part is numeric
- [b]oth: return <perm>.<offset>
- [t]otal: default, return <perm> + <offset>

p, o, b and t are ignored if the stat is non-numeric.

--

0: <player>[:<subsheet>]/<stat>
1: [p]ermanent, [o]ffset, [b]oth, [t]otal, if any

p: <player>
x: <sub-sheet_name>
s: <stat>
d: dbref of sheet

requires: isstaff(<dbref>)

*/

@fo me=&ufunc/privileged.getstat [v( d.sfp )]=
	u\\( 
		[search( name=Stat Functions Prototype <sfp> )]/f.getstat, 
		\\\%0 , \\\%1 
	\\)

// -----------------------------------------------------------------------------

&f.getstat [v( d.sfp )]=
	strcat( 
		setq( p, u( .pmatch, before( before( %0, / ), : ))), 
		setq( x, edit( trim( after( before( %0, / ), : )), %b, _ )), 
		setq( s, rest( %0, / )), 

		case( 0, 
// the following may work without objeval(<wiz>, getstat(xx/yy))
// [cor( isstaff( %@ ), strmatch( %qp, %# ))]
			isstaff( %@ ), 
			#-1 PERMISSION DENIED, 
			t( %qp ), 
			#-1 PLAYER NOT FOUND, 
			t( setr( d, u( f.find-sheet, %qp ))), 
			#-1 SHEET NOT FOUND, 
			t( %qs ), 
			#-1 STAT MUST BE PROVIDED, 
			u( f.getstat.workhorse, %qp[if( t( %qx ), :%qx )], %qs, %qd, %1 )
		)
	)


// think u( v( d.sfp )/f.getstat, me/resources )

/*
--------------------------------------------------------------------------------
-- Getstat Workhorse -----------------------------------------------------------

0: Player dbref[:Sub-Sheet_Name]
1: Stat to Get
2: Sheet Loc
3: [p]ermanent, [o]ffset, [b]oth, [t]otal, if any

qp: player dbref
qx: sub-sheet_name

qs: <stat path>, then <stat>'s location if character would have it
qc: class of <stat path>: numeric, string, list, flag

qa: attribute to look stat details
qd: <stat> details if on sheet

*/

&f.getstat.workhorse [v( d.sfp )]=
	strcat( 
		setq( p, first( %0, : )), 
		setq( x, rest( %0, : )), 

		setq( s, ulocal( f.statpath.workhorse, %1, %qp )), 
		setq( c, ulocal( f.get-class, %qs )), 

		setq( a, if( t( %qx ), %qx!%qs, %qs )), 
		setq( d, u( %2/_%qa )), 

		if( t( %qs ), 
// If Stat Location Valid & Found ...
			case( %qc, 
// Class: Flag (ignore %2, give 1/<null> for set/not set)
				flag, 
				ulocal( f.getstat.workhorse.flag, %qp, _%qa ), 

// Class: String (ignore %3, give all)
				string, 
				ulocal( f.getstat.workhorse.string, %qp, _%qa ), 

// Class: List (ignore %3, give all)
				list, 
				%qd, 

// Class: Number (follow %3's directive)
// .. first, convert 'derived' to value
				numeric, 
				strcat( 
					setq( d, ulocal( f.getstat.workhorse.numeric, %qp, _%qa )), 
					switch( %3, 
						p*, first( %qd, . ), 
						o*, rest( %qd, . ), 
						b*, %qd, 
						t*, ladd( %qd, . ), 
						ladd( %qd, . )
					)
				), 
// Else: Panic and return full stat
				%qd
			), 
// .. Error Looking Up Stat
			%qs 
		)
	)


/*
--------------------------------------------------------------------------------
-- Getstat Numeric -------------------------------------------------------------

0: sheet dbref
1: _sheet.statpath[!sub-sheet_name] (to pull 'instance' from, if appropriate)
returns: value list

i: instance (if exists) with underscores
x: sub-sheet_name
s: statpath without instance

uses: crumple() -- squish + trim

At the moment, we have no derived stats that require instance, but I'm adding 
this code to it at the moment, anyhow. You never know.

*/

&f.getstat.workhorse.numeric [v( d.sfp )]=
	localize( strcat( 
		setq( s, first( %1, ! )), 
		setq( x, rest( %!, ! )), 
	 	setq( i, crumple( before( rest( %qs, %( ), %) ))), 
		setq( s, u( f.statpath-without-instance, trim( %qs, b, _ ))), 
		iter( 
			get( %0/%1 ), 
// .. this won't pass 'sub-sheet' information; sub-sheets cannot do 'derived'
			if( 
				strmatch( %i0, derived ), 
				ulocal( u( d.data-dictionary )/%qs, %0, %qi ), 
				%i0 
			), 
			., . 
		)
	))


/*
--------------------------------------------------------------------------------
-- Getstat String --------------------------------------------------------------

0: sheet dbref
1: _sheet statpath[!sub-sheet_name] (to pull 'instance' from, if appropriate)
returns: value

i: instance (if exists) with underscores
s: statpath without instance

*/

&f.getstat.workhorse.string [v( d.sfp )]=
	localize( strcat( 
		setq( s, first( %1, ! )), 
		setq( x, rest( %!, ! )), 
	 	setq( i, crumple( before( rest( %qs, %( ), %) ))), 
		setq( s, u( f.statpath-without-instance, trim( %qs, b, _ ))), 
// .. again, sub-sheets cannot look up 'derived' traits
		if( 
			strmatch( get( %0/%1 ), derived ), 
			ulocal( [u( d.data-dictionary )]/%qs, %0, %qi ), 
			get( %0/%1 ) 
		)
	))


/*
--------------------------------------------------------------------------------
-- Getstat Flag ----------------------------------------------------------------

0: sheet dbref
1: _sheet statpath (to pull 'instance' from, if appropriate)
returns: value

i: instance (if exists) with underscores
s: statpath without instance

*/

&f.getstat.workhorse.flag [v( d.sfp )]=
	localize( strcat( 
		setq( s, first( %1, ! )), 
		setq( x, rest( %!, ! )), 
	 	setq( i, crumple( before( rest( %qs, %( ), %) ))), 
		setq( s, u( f.statpath-without-instance, trim( %qs, b, _ ))), 
// .. again, sub-sheets cannot look up 'derived' traits
		if( 
			strmatch( get( %0/%1 ), derived ), 
			ulocal( [u( d.data-dictionary )]/%qs, %0, %qi ), 
			hasattr( %0, %1 ) 
		)
	))


/*
--------------------------------------------------------------------------------
-- Getstat Tests ---------------------------------------------------------------
*/

think getstat( thenomain/willpower, both )
think getstat( thenomain/willpower max, both )

// General Test
think [statname(thenomain/cont.rep)]: [getstat(thenomain/cont.rep)]

think [iter(full name|c(sp)|athl|athl.quick|speed|kith|blah, --> 
	[ansi(c, statname(thenomain/##))]: [getstat(thenomain/##)], |, %r)]

// List and String Lookups
think getstat(thenomain/kith)
think getstat(thenomain/full name)

// Numeric Without Offset Lookup
think getstat(thenomain/str)
think getstat(thenomain/str, perm)
think getstat(thenomain/str, offset)
think getstat(thenomain/str, both)
think getstat(thenomain/str, total)

// Numeric With Offset Lookup
think getstat(thenomain/speed)
think getstat(thenomain/speed, perm)
think getstat(thenomain/speed, offset)
think getstat(thenomain/speed, both)
think getstat(thenomain/speed, total)

// Non-Numeric Lookup
think getstat(thenomain/cont.rep)
think getstat(thenomain/cont.rep, perm)
think getstat(thenomain/cont.rep, offset)
think getstat(thenomain/cont.rep, both)
think getstat(thenomain/cont.rep, total)



/*
================================================================================
== hastag?(<stat>, <tag.list>[, or|and]) =======================================

Or/Default: Does <stat> have a tag in <tag.list>? And: Does <stat> have all 
tags in <tag.list>?

0: stat
1: tag.list (not case sensitive)
2: or/and, if there. Assume or-check
output: 1 or 0 (invalid stat names will always return 0)

qs: stat path

--------------------------------------------------------------------------------
*/

@fo me=&ufunc/privileged.hastag? [v( d.sfp )]=
	u\\( [num( sfp )]/f.hastag?, \\\%0, \\\%1, \\\%2 \\)

// -----------------------------------------------------------------------------

&f.hastag? [v( d.sfp )]=
	[setq( s, u( f.statpath.workhorse, %0 ))]
	
	[if( 
		t( %qs ), 
		u( f.hastag?.workhorse, 
			u( f.statpath-without-instance, %qs ), 
			%1, 
			strmatch( %2, a* )
		), 
		0 
	)]


/*
--------------------------------------------------------------------------------
-- Hastag? Workhorse -----------------------------------------------------------

0: stat path
1: tag.list (not case sensitive), !tag means 'not this tag', only good for 'and'
2: 1 if "and", 0/null if "or"

qt: results from 'tags.<statpath>'
qb: boolean list of matches

--------------------------------------------------------------------------------
*/

&f.hastag?.workhorse [v( d.sfp )]=
	[setq( t, lcstr( u( v( d.data-tags )/tags.%0 )))]

	[setq( b, 
		iter( %1, 
			if( strmatch( %i0, !* ), 
				not( match( %qt, rest( %i0, ! ), . )), 
				match( %qt, %i0, . )
			), 
			. 
		)
	)]

	[if( %2, 
// and-check
		land( %qb ), 
// else/default: or-check
		lor( %qb )
	)]


// -----------------------------------------------------------------------------
// -- Hastag? Tests ------------------------------------------------------------

think u( v( d.sfp )/f.hastag?.workhorse, advantage.speed, derived )
think u( v( d.sfp )/f.hastag?.workhorse, advantage.speed, !human )
think u( v( d.sfp )/f.hastag?.workhorse, advantage.speed, derived.!human )

think hastag?( speed, derived )
think hastag?( speed, derived.pool )
think hastag?( speed, derived.pool, and )



/*
================================================================================
== statvalidate(<stat>, <value>|default) =======================================

The point of this function is to take a statpath and a (possibly partial) 
value, or the value of "default", and return the full value if valid, #-1 if 
not.

UPDATE: Now we're adding list stats, <num>.<num>.<num> is valid input for 
class.<statpath>: list

--------------------------------------------------------------------------------
*/

@fo me=&ufunc/privileged.statvalidate [v( d.sfp )]=
	u\\( [num( sfp )]/f.statvalidate, \\\%0, \\\%1 \\)

// -----------------------------------------------------------------------------

&f.statvalidate [v( d.sfp )]=
// .. strip instance from the statpath to pull value list directly from the DD
	[setq( s, u( f.statpath-without-instance, u( f.statpath.workhorse, %0 )))]
	[switch( 0, 
		1[@@(<is staff>)], #-1 STAFF ONLY, 
		t( %qs ), %qs, 
		u( f.statvalidate.workhorse, %qs, %1 )
	)]


/*
--------------------------------------------------------------------------------
-- Statvalidate Workhorse ------------------------------------------------------

0: stat path *without instance*
1: value|"default"
Output: closest valid match. if "default", return &default.<statpath>

qs: stat's value validation list (grabbed from DD)
qc: stat's  class
qv: matched value, if any

*/

&f.statvalidate.workhorse [v( d.sfp )]=
	localize( switch( 0, 

// error
		u( f.statvalue-good, %1 ), 
		#-1 VALUE CONTAINS ILLEGAL FORMAT, 

// 'default'
		comp( lcstr( %1 ), default ), 
		strcat( 
			setq( v, get( u( d.data-dictionary )/default.%0 )), 
			if( t( %qv ), 
				%qv, 
				@@( default of <null> will clear stat )
			)
		), 

// grab value
		strcat( 
			setq( s, first( get( u( d.data-dictionary )/%0 ), | )), 
			setq( c, ulocal( f.get-class, %0 )), 
			setq( v, 
				case( %qc, 

// flag: the value becomes the value on the data dictionary or <null>
					flag, 
					if( strmatch( %1, ), @@( <null> ), %qs ), 

// list: set-intersect as a cheap filter, will not name-complete
// .. (like setstat.workhorse, make space -> '.')
					list, 
					strcat( 
						setq( e, edit( %1, %b, . )), 
						setq( x, 
							iter( graball( %qe, !*, ., . ), 
								![grab( .%qs, [rest( %i0, ! )]*, . )], 
								., . 
							)
						), 
						setq( a, 
							iter( setdiff( %qe, %qx, . ), 
								grab( .%qs, %i0*, . ), 
								., . 
							)
						), 
						trim( squish( %qa.%qx, . ), b, . )
					), 

// other classes: grab the first match
					grab( %qs, %1*, . )
				)
			), 

// validate value
			case( %qs, 
// '*': Anything will do, return what was passed ( probably "string" class )
				*, 
				%1, 

// '#': Any number 1+
				#, 
				if( cand( gte( %1, 1 ), isint( %1 )), 
					%1, 
					#-1 VALUE NOT A POSITIVE INTEGER 
				), 
// else: other validations
				switch( 0, 
// .. passed null
					comp( %1,  ), 
					#-1 VALUE WAS NULL, 
// .. substats are implied '*'
					lt( words( %0, . ), 3 ), 
					%1, 
// .. requested value not in the list
//					t( %qv ), 
					strlen( %qv ), 
					#-1 VALUE NOT FOUND, 
// .. else: return grabbed value
					%qv 
				)
			)
		)
	))


// -----------------------------------------------------------------------------
// -- Statvalidate Tests -------------------------------------------------------

@dolist 
	str:1 stren:pie court:s clarity:default init:default lang_(fr):1 cou_(s):2 
	cou(s):default acad.library:1={ 
		think >> set [setr( z, first( ##, : ))] to [setr( y, rest( ##, : ))] => 
		[escape( statvalidate( %qz, %qy ))] 
		[ansi( xh, %([lcstr( statpath( %qz ))]%) )] 
	}

think statvalidate( lang (fr), 1 )
think statvalidate( court (s), 1 )
think statvalidate( seeming, ele )
think statvalidate( acad.library, 1 )

think statvalidate( full name, Alee )
think statvalidate( full name, Alee` )
think statvalidate( full name, 10.Alee )

// "list" class examples

think statvalidate(rage, 1.3.47)



/*
================================================================================
== statvalidate?(<stat>, <value>) ==============================================

0: stat to validate
1: value to validate (not case sensitive)
output: 1 or 0 (invalid stat names and derived stats will always return 0)

Pushes through f.statvalidate, and that's it.
Probably not needed

--------------------------------------------------------------------------------
*/

@fo me=&ufunc/privileged.statvalidate? [v( d.sfp )]=
	u\\( [num( sfp )]/f.statvalidate?, \\\%0, \\\%1 \\)

// -----------------------------------------------------------------------------

&f.statvalidate? [v( d.sfp )]=t( ulocal( f.statvalidate, %0, %1 ))



/*
================================================================================
== setstat(<player>/<stat>, <value>|default[, <behavior>]) =====================

Almost exactly like getstat() and possibly others, <behavior> is:

- [of]fset: set the second part, if stat is numeric
- [ov]erride: ignore validation & prerequisite checks for stat, set literally
- default: restore stat to default value, first part if numeric 

"Default" only has meaning for the permanent stat. 

Overwrites current values.

Text is determined by stat's current value.

NOTE THIS SOMEWHERE: Offsets must always be numeric, 0 = null = erase

--

0: target/[!]stat 					<--- I hate the / in this now
1: value - if null, erase stat or reset default
2: [of]fset, [ov]erride validation

qp: player dbref
qx: sub-sheet, if any
qw: where-is-sheet location (just to pass it along)
qs: stat path
qi: statpath without instance
qv: value to set, validated
qr: prerequisite checks

--

<target> may be 'charobj' or 'charobj:sub-sheet'.

*/

@fo me=&ufunc/privileged.setstat [v( d.sfp )]=
	u\\( [num( sfp )]/f.setstat, \\\%0, \\\%1, \\\%2 \\)

// --

&f.setstat [v( d.sfp )]=
	if( isstaff( %@ ), 
// Staff?  OK.
		strcat( 

// qp: player dbref
			setq( p, u( .pmatch, first( first( %0, / ), : ))), 

// qw: where is the sheet
			setq( w, u( f.find-sheet, %qp )), 

// qs: statpath: If we can grab it from the player, else grab it from the DD.
			setq( s, 
				if( 
					setr( s, 
						ulocal( f.statpath.workhorse, rest( %0, / ), %qp )
					), 
					%qs, 
					ulocal( f.statpath.workhorse, rest( %0, / ))
				)
			), 

// qi: statpath without instance
			setq( i, ulocal( f.statpath-without-instance, %qs )), 

// qx: sub-sheet name (with underscores)
			setq( x, 
				edit( 
					trim( rest( first( %0, / ), : )), 
					%b, _ 
				)
			), 
			setq( x, 
				case( 0, 
					not( strmatch( %qx, )), 
					@@( self ), 

					not( strmatch( %qx, #MAIN# )), 
					@@( self ), 

					valid( attrname, %qx ), 
					#-1 Sub-Sheet Name Illegal, 

					not( strmatch( %qx, *!* )), 
					#-1 Sub-Sheet Name Cannot Have ! In It, 

					%qx
				)
			), 

// qv: value validation
			setq( v, 
				switch( %2, 
// .. override - whatever we want
					ov*, 
					%1, 
// .. offset - must be numeric ( we check stat's class in workhorse )
					of*, 
					if( 
						or( isnum( %1 ), not( comp( %1,  ))), 
						%1, 
						#-1 Non-Numeric Offset
					), 
// .. normal - validate completely, if null then null, if default then default
					case( %1, 
						default, 
						ulocal( u( d.data-dictionary )/default.%qi, %qw ), 
						@@( null ), , 
						ulocal( f.statvalidate.workhorse, %qi, %1 )
					)
				)
			), 

// qr: prerequisites validation, 'template' and 'other' only
			setq( r, 
				case( 0, 
// .. always good if "override" is set
					not( strmatch( %2, ov* )), 
					1, 
// .. if template check is bad, pass error (always allow 'null')
					cor( 
						setr( r, u( f.prereq-check-template, %qw, %qi )), 
						strmatch( %qv, )
					), 
					%qr, 
// .. offset is bad for template (above) but good for other (below)
					not( strmatch( %2, of* )), 
					1, 
// .. if other check is bad, pass error
					t( setr( r, 
						u( f.prereq-check-other, 
							%qw, 
							%qi, 
							before( rest( %qs, %( ), %) ), 
// .. (stat being changed by...)
// .. (don't mess with %qv unless stat-class is numeric)
							if( u( f.isclass?, %qs, numeric ), 
								sub( %qv, first( u( %qw/_%qs ), . )), 
								%qv
							)
						)
					)), 
					%qr, 

// .. else, all was good
					1 
				)
			), 

// >> make sure qp, qw, qx, qs and qv are all good!
			switch( 0, 

				t( %qp ), 
				#-1 Player Not Found, 

// .. sub-sheet name check
				not( strmatch( %qx, #-* )), %qx, 

// .. must have a template unless "override" switch
				or( t( get( %qw/_bio.template )), strmatch( %2, ov* )), 
				#-1 Sheet Template Not Found, 

				comp( rest( %0, / ),  ), 
				#-1 Stat Name May Not Be Null, 

// .. stat name check
				t( %qs ), %qs, 

// .. stat value check
				not( strmatch( %qv, #-* )), %qv, 

// .. stat prerequisite check
				t( %qr ), %qr, 

// .. else: good! - pass target, statpath with underscores, value, offset
				u( f.setstat.workhorse, 
					%qw[if( t( %qx ), :%qx )], 
					edit( %qs, %b, _ ), 
					%qv, 
					%2 
				)
			) 
		), 

		#-1 Not Staff 
	)


/*
--------------------------------------------------------------------------------
-- Setstat Workhorse -----------------------------------------------------------

0: Sheet Loc[:Sub-Sheet_Name]
1: Full Stat Path
2: <value> -- for 'flag' type, ignore %2 for setting, honor if <null>
3: [of]ffset  ([ov]veride may be passed, but ignored)

qp: sheet location
qx: sub-sheet_name

qc: stat's class
qs: statpath, edited if class is 'list' (to remove substat)

qd: <stat> details if on sheet, if any
qf: first (permanent) value on %qd
qr: offset ("rest") on %qd, if any

qm: Message (since the 'set' message doesn't look like it's passed through.)
qv: processed value to set (if complex processing needs done, like lists)

qa: "add" these list items (for type:class only)
qu: "un-add" these list items (for type:class only)

* 'derived' for setstat, the [..] nonsense, no longer applies
   remember to remove this

--------------------------------------------------------------------------------
*/

&f.setstat.workhorse [v( d.sfp )]=
	strcat( 
		setq( v, ), 
		setq( p, first( %0, : )), 
		setq( x, rest( %0, : )), 
		setq( c, ulocal( f.get-class, %1 )), 

// .. oh yeah, if class:list & type.stat.substat, strip the substat
		if( 
			cand( 
				strmatch( %qc, list ), 
				strmatch( %1, *.*.* )
			), 
			setq( s, extract( %1, 1, 2, . )), 
			setq( s, %1 )
		), 

// .. add statpath & sub-sheet when appropriate 
		if( t( %qx ), 
			setq( s, %qx!%qs )
		), 

// get existing stat data
		setq( d, get( %qp/_%qs )), 
		setq( f, first( %qd, . )), 
		setq( r, rest( %qd, . )), 

		setq( m, case( 1, 

// >> switch is "offset", replace remove or set - "numeric" type only.
			strmatch( %3, of* ), 
			case( 0, 

// .. .. offset: stat class is not "numeric", deny offset
				strmatch( %qc, numeric ), 
				#-1 CANNOT OFFSET NON-NUMERIC STAT, 

// .. .. offset: offset is null or 0 = erase offset
				cand( comp( %2, ), neq( %2, 0 )), 
				set( %qp, _%qs:%qf ), 

// .. .. offset: stat doesn't exist, set 0.<offset>
				comp( %qf, ), 
				set( %qp, _%qs:0.%2 ), 

// .. .. offset: else set <perm>.<offset>
				set( %qp, _%qs:%qf.%2 )
			), 

// >> switch is "override", replace the whole thing without checking anything
			strmatch( %3, ov* ), 
			set( %qp, _%qs:%2 ), 

// >> value is null, erase stat ( this could be in the "else", too )
			not( comp( %2, )), 
			set( %qp, _%qs: ),

// >> stat class is "numeric", replace permanent
			strmatch( %qc, numeric ), 
			set( %qp, _%qs:%2[if( %qr, .%qr )] ), 

// >> stat class is "list", set or un-set ( !value ) each item in list
// .. list: right now, lists may be space-delimited, editing space to .
			strmatch( %qc, list ), 
			[setq( v, edit( %2, %b, . ))]
			[setq( u, graball( %qv, !*, ., . ))]
			[setq( a, setdiff( %qv, %qu, . ))]
			[setq( u, edit( %qu, !, ))]

// .. .. list: qv: remove the remove stuff then add the add stuff
			[setq( v, setunion( setdiff( %qd, %qu, . ), %qa, . ))]
			[set( %qp, _%qs:%qv )], 

// >> else, replace all
			set( %qp, _%qs:%2 )

		)), 

// Display
		case( 1, 

// error from 'set()'
			comp( %qm, ), %qm, 

// 'set x to y'
			strlen( setr( v, if( strlen( %qv ), %qv, %2 ))), 
			strcat( 
				Set, %b, 
				ulocal( f.statname.workhorse, rest( %qs, . )), 
				if( strmatch( %3, of* ), %boffset ), 
				if( not( strmatch( %qc, flag )), 
					%bto '%qv' 
				), .
			), 
// 'unset x from y'
			strcat( 
				Unset, %b, 
				ulocal( f.statname.workhorse, rest( %qs, . )), 
				if( strmatch( %3, of* ), %boffset ), . 
			)
		)
	)


// -----------------------------------------------------------------------------
// -- Setstat Tests ------------------------------------------------------------
// thenomain, my test frob.

// ---
// Start by cleaning the slate

think [setstat(thenomain/willpower_maximum, default)] 
think willpower max -> [getstat(thenomain/willpower_maximum, both)] 

think [setstat(thenomain/willpower, default)] 
think willpower -> [getstat(thenomain/willpower, both)] 

think [setstat(thenomain/willpower max, 2, off)] -> 
	[getstat(thenomain/willpower max, b)]

think [setstat(thenomain/willpo, 2, off)] -> [getstat(thenomain/willp, b)]
think [setstat(thenomain/willpo, 7, override)] -> [getstat(thenomain/willp, b)]
think [setstat(thenomain/willpo, default)] -> [getstat(thenomain/willp, b)]

// --

think [setstat(thenomain/willpo, 0, offset)] -> [getstat(thenomain/willp, b)]
think [setstat(thenomain/willpo, default)] -> [getstat(thenomain/willp, b)]

// set the offset, change the derived stat to just "5", reset the default
think [setstat(thenomain/willpo, 2, off)] -> [getstat(thenomain/willp, b)]
think [setstat(thenomain/willpo, 5, override)] -> [getstat(thenomain/willp, b)]
think [setstat(thenomain/willpo, default)] -> [getstat(thenomain/willp, b)]

// clear the stat entirely and try to set an offset
think [setstat(thenomain/willpo, , overr)] -> [getstat(thenomain/willp, b)]
think [setstat(thenomain/willpo, 2, off)] -> [getstat(thenomain/willp, b)]

// Restore
think [setstat(thenomain/willpo, default)] -> [getstat(thenomain/willp, b)]

// ---
// Let's play with Academics
think [setstat(thenomain/acad, 2)] -> [getstat(thenomain/acad, b)]

// Try to set a default on a stat that doesn't have one
think [setstat(thenomain/acad, default)] -> [getstat(thenomain/acad, b)]

// Okay, let's clear it.
think [setstat(thenomain/acad)] -> [getstat(thenomain/acad, b)]

// We can give someone a specialty without a stat.
think [setstat(thenomain/acad.history, 1)] -> 
	[getstat(thenomain/acad.history, b)]

// But not for stats that won't allow specialties/secondaries
think [setstat(thenomain/strength.history, 1)]

// Restore Academics to normal
think [setstat(thenomain/acad)] -> [getstat(thenomain/acad, b)]
think [setstat(thenomain/acad.history)] -> [getstat(thenomain/acad.history, b)]



/*
================================================================================
-- shiftstat(<stat>, <value>[, <option>]) -----------------------------------

<option>:
	offset: Increase the offset
	override: Ignore the stat limitations, still must be numeric

validate stat path
validate stat may end as <current> + <value>, unless override
basically getstat + setstat

0: player/stat
1: value (must be non-zero numeric)
2: option ([of]fset, [ov]erride)

qp: player dbref
qw: where-is-sheet location (just to pass it along)
qs: stat path
qc: stat class (numeric, string, list - we only accept numeric, here)
qv: value to shift by, validated
qa: amount to offset by
qr: prerequisites check, 'template' and 'other' only

--------------------------------------------------------------------------------
*/

@fo me=&ufunc/privileged.shiftstat [v( d.sfp )]=
	u\\( [num( sfp )]/f.shiftstat, \\\%0, \\\%1, \\\%2 \\)

// -----------------------------------------------------------------------------

&f.shiftstat [v( d.sfp )]=
	strcat( 

// qp: player dbref
			setq( p, u( .pmatch, first( first( %0, / ), : ))), 

// qw: where is the sheet
			setq( w, u( f.find-sheet, %qp )), 

// qx: sub-sheet name (with underscores)
			setq( x, 
				edit( 
					trim( rest( first( %0, / ), : )), 
					%b, _ 
				)
			), 
			setq( x, 
				if( 
					cor( 
						strmatch( %qx, ), 
						valid( attrname, %qx ), 
						not( strmatch( %qx, ! ))
					),
					%qx, 
					#-1 Sub-Sheet Name Illegal
				)
			), 

// Statpath: If we can grab it from the player, great, else grab it from the dd.
// (Note: "first()" is there in case they're trying to set multiple stats)
		setq( s, 
			if( 
				setr( s, u( f.statpath.workhorse, rest( %0, / ), %qp )), 
				%qs, 
				u( f.statpath.workhorse, rest( %0, / ))
			)
		), 
		setq( c, ulocal(f.get-class, %qs )), 
		setq( v, 
			if( 
				cand( isnum( %1 ), neq( %1, 0 )), 
				trim( %1, l, + ), 
				#-1 SHIFT MUST BE NON-ZERO NUMERIC 
			)
		), 

// pre-requisites validation, 'template' and 'other' only
		setq( r, 
			case( 0, 
				not( strmatch( %2, ov* )), 1, 
				t( setr( r, u( f.prereq-check-template, %qw, %qi ))), %qr, 
				t( setr( r, 
					u( 
						f.prereq-check-other, 
						%qw, 
						%qi, 
// >> the line below is the 'instance' for that stat
						before( rest( %qs, %( ), %) ), 
						%qv 
					)
				)), 
				%qr, 
				1 
			)
		), 

		switch( 0, 
			isstaff( %@ ), #-1 Staff Only, 
			t( %qp ), #-1 Player Not Found, 
			not( strmatch( %qx, #-* )), %qx, 
			t( get( %qw/_bio.template )), #-1 Sheet Template Not Found, 
			comp( rest( %0, /), ), #-1 Stat Name May Not Be Null, 
			t( %qs ), %qs, 
			strmatch( %qc, numeric ), #-1 Stat Class Must Be Numeric, 
			t( %qv ), %qv, 
			t( %qr ), %qr, 
			u( f.shiftstat.workhorse, %qw[if( t( %qx ), :%qx )], %qs, %qv, %2 )
		)
	)

/*
--------------------------------------------------------------------------------
-- Shiftstat Workhorse ---------------------------------------------------------

0: sheet location[:sub-sheet_name]
1: statpath
2: amount to inc/dec
3: [of]fset, [ov]erride

qp: player's sheet dbref
qx: sub-sheet_name
qs: built stat-path

qd: current stat details
qf: first portion of stat (permanent)
qr: rest of stat (offset)
qa: sum of %qf and %2, if 0 then <null> (to erase value with setstat)
qi: statpath without instance (because of the validate system)
qc: stat class (must be numeric)

--------------------------------------------------------------------------------
*/


&f.shiftstat.workhorse [v( d.sfp )]=
	strcat( 
		setq( p, first( %0, : )), 
		setq( x, rest( %0, : )), 
		setq( s, if( t( %qx ), %qx!%1, %1 )), 

		setq( d, u( %qp/_%qs )), 
		setq( f, first( %qd, . )), 
		setq( r, rest( %qd, . )), 
		setq( a, if( setr( a, add( %qf, %2 )), %qa, )), 
		setq( i, ulocal( f.statpath-without-instance, %1 )), 
		setq( c, ulocal( f.get-class, %1 )), 

		case( 1, 
			not( strmatch( %qc, numeric )), 
			#-1 STAT CLASS MUST BE NUMERIC, 

			strmatch( %3, ov* ), 
			ulocal( f.setstat.workhorse, %0, %1, %qa, ov ), 

			strmatch( %3, of* ), 
			ulocal( f.setstat.workhorse, %0, %1, add( %qr, %2 ), of ), 

// >> not offset nor override, so check if primary value is 'derived'
			strmatch( %qf, derived ), 
			#-1 CANNOT SHIFT DERIVED STAT WITHOUT OVERRIDE, 

// >> check validation for primary value
			not( t( ulocal( f.statvalidate.workhorse, %qi, %qa ))), 
			#-1 SHIFT MAKES STAT INVALID, 

// >> set that stat!
			ulocal( f.setstat.workhorse, %0, %1, %qa )
		)
	)


// -----------------------------------------------------------------------------
// -- Shiftstat Tests ----------------------------------------------------------

think [shiftstat(thenomain/strength, 1)] -> [getstat(thenomain/strength, b)]
think [shiftstat(thenomain/stren, 1, off)] -> [getstat(thenomain/strength, b)]
think [shiftstat(thenomain/strength, -1)] -> [getstat(thenomain/strength, b)]
think [shiftstat(thenomain/stren, 0, off)] -> [getstat(thenomain/strength, b)]
think [shiftstat(thenomain/stre, -1, off)] -> [getstat(thenomain/strength, b)]

think setstat(thenomain/full name, Jack Fireheart)
think [shiftstat(thenomain/full name, Jack Fireheart)] -> [getstat(thenomain/full name)]
think [shiftstat(thenomain/full name, 4)] -> [getstat(thenomain/full name)]
think setstat(thenomain/full name, )
think [shiftstat(thenomain/full name, 4)] -> [getstat(thenomain/full name)]


/*
================================================================================
== getsheet(<player>[/<stat>]) =================================================

Now that we have sub-sheets, we need a way to know which sub-sheets someone has. 
Normally this will only be used for 'sheet' code, but we're exposing this for 
any code that might need it.

The keyword #MAIN# means the main sheet. That is, if the information exists on 
the primary sheet.

--

getsheet( <player> )
	Get the name of all the sub-sheets on <player>. 
	Always returns #MAIN#, plus any sub-sheets.

getsheet( <player>/<stat> )
	Get the name of all sheets with <stat>. 
	May return nothing, if no sheets do.

getsheet( <player>/<stat>, <statstuff> )
	Get the name of all sheets with <stat> and their values
	e.g.: <stat>:<values>|...
	<statstuff> is the same as getstat(): permanent, offset, both, total 
	(needed even if the stat is non-numeric)

--

f: first part of %0 (<player>)
r: rest of %0 (<stat>)

p: player dbref
w: where is the sheet (sheet loc)
s: statpath (if appropriate)

*/

@fo me=&ufunc/privileged.getsheet [v( d.sfp )]=
	u\\( [num( sfp )]/f.getsheet, \\\%0, \\\%1  \\)

// --

&f.getsheet [v( d.sfp )]=
	strcat( 
		setq( f, first( %0, / )), 
		setq( r, trim( rest( %0, / ))), 
		setq( p, u( .pmatch, %qf )), 
		setq( w, u( f.find-sheet, %qp )), 
		setq( s, if( strlen( %qr ), ulocal( f.statpath.workhorse, %qr, %qp ))), 

		case( 0, 
			isstaff( %@ ), 
			#-1 Staff Only, 

			t( %qp ), 
			#-1 Player Not Found, 

			t( %qw ), 
			#-1 Sheet Not Found, 

// !r | s - if the player entered a stat, and 'statpath' returned #-1, panic
			cor( not( strlen( %qr )), t( %qs )), 
			#-1 Error From Statpath: [rest( %qs )], 

			u( f.getsheet.workhorse, %qp, %qw, %qs, %1 )
		)
	)

/* 
--------------------------------------------------------------------------------
-- Getsheet Workhorse ----------------------------------------------------------

0: player dbref (qp)
1: sheet loc (qw)
2: statpath (optional) (qs)
3: also return stat data? (pass through getstat: perm, offset, both, total)

Other '.workhorse' functions don't check stapath until now, while getsheet() 
does it before now. I'm kind of sorry that we don't always check statpath before 
passing it to the workhorse, because now I'm going to be checking it twice: Once 
below and once in 'f.getstat.workhorse'. This is inefficient, but it's far too 
late to change it now.

*/

&f.getsheet.workhorse [v( d.sfp )]=
	case( 1, 
// list every (sub-)sheet with that statpath, and the value(s)
		cand( strlen( %2 ), strlen( %3 )), 
		u( f.getsheet.workhorse.values, %0, %1, %2, %3 ), 

// list every (sub-)sheet with that statpath
		t( strlen( %2 )), 
		trim( 
			strcat( 
				if( words( lattr( %1/_%2 )), #MAIN# ), |, 
				iter( sort( lattr( %1/_*!%2 )), 
					titlestr( edit( trim( first( %i0, ! ), _ ), _, %b )), 
					, | 
				)
			), 
			b, |
		), 

// just list sub-sheets
		trim( 
			strcat( 
				#MAIN#, |, 
				iter( 
					setunion( 
						iter( 
							filter( fil.sub-sheet.stat-path, lattr( %1/*!* )), 
							first( %i0, ! )
						), 
					), 
					titlestr( edit( first( %i0, ! ), _, %b )), 
					, | 
				)
			), 
			b, | 
		)
	)

/* 
-----------------------------------------------------------------------------
Getsheet Workhorse Values
0: player dbref
1: sheet loc
2: statpath
3: perm, offset, both, total
m: my stats; o: other sheets' stats; v: values for other sheets

output: <sheet name>:<value>|...
-----------------------------------------------------------------------------
*/

&f.getsheet.workhorse.values [v( d.sfp )]=
	trim( 
		strcat( 
			setq( s, rest( %2, . )), 
			setq( m, lattr( %1/_%2 )), 
			setq( o, sort( lattr( %1/_*!%2 ))), 
			setq( v, 
				iter( %qo, 
					ulocal( f.getstat.workhorse, 
						%0:[first( rest( %i0, _ ), ! )], 
						%qs, %1, %3 
					), 
					, |
				)
			), 

// list 'my' value for this stat, if it exists
			if( t( %qm ), 
				strcat( 
					#MAIN#, :, u( f.getstat.workhorse, %0, %qs, %1, %3 )
				)
			), |, 
// list 'other' sub-sheets values for this stat, if they exist
			iter( %qo, 
				strcat( 
					titlestr( edit( rest( first( %i0, ! ), _ ), _, %b )), :, 
					elements( %qv, inum(), | ) 
				), 
				, | 
			)
		), 
		b, | 
	)

// -----------------------------------------------------------------------------

&fil.sub-sheet.stat-path [v( d.sfp )]=regmatch( %0, [^\.]*!.* )

/* 
--------------------------------------------------------------------------------
-- tests -----------------------------------------------------------------------

think u( v( d.sfp )/fil.sub-sheet.stat-path, attribute.strength )
think u( v( d.sfp )/fil.sub-sheet.stat-path, mary!attribute.strength )

think filter( v( d.sfp )/fil.sub-sheet.stat-path, lattr( %#/_*.* ))

think u( v( d.sfp )/f.getsheet, %# )
think u( v( d.sfp )/f.getsheet, %#/resources )

think getsheet( me )
think getsheet( me/resources )
think getsheet( me/resources, total )

&_attribute.computer me=
think getsheet( me/computer )

think u( v( d.sfp )/f.getsheet, %#/resources )
think u( v( d.sfp )/f.getsheet, %#/resources, t )

---

And now, an extra trick:

think strcat( 
		setq( v, v( d.sfp )), 
		setq( p, %# ), 
		setq( s, u( %qv/f.statpath, %qp/resources )), 
		
	)
*/