/*
Approval System

================================================================================
== EXPLANATION =================================================================

Characters tend to go through a number of various states, from completely new to 
dead. This part of the character generation system keeps track of that.

	Never-Approved: New, lacks any of the other states, 'In Chargen'

	Approved: Can enter the grid, gain XP, your typical Player Character
	Storyteller: Has most of the abilities of Approved, but is not a PC
	NPC: Has most of the abilities of Approved, but is not a PC (unused?)

	Unapproved: Was once Approved, is no longer, but is not 'In Chargen'
	Frozen: Unapproved + cannot interact with anyone
	Dead: Unapproved + cannot interact with anyone + cannot be re-approved

	Staff: Handled by isstaff(), but is also considered 'Approved' (bad design?)

Chargen (stat-setting commands) can only be used by the Never-Approved or Staff. 
Never Guests. It's then up to staff to put them into the Approved, Storyteller, 
or NPC state.

As a common convention, frozen and dead players have '_<dbref>' attached to 
their names. Care should be taken that they don't remove them.

'Dead' may not be necessary, but some people may want it. We'll see.

I wish we had a way to stop frozen and dead people from using @name.


--------------------------------------------------------------------------------
----- Attributes ---------------------------------------------------------------

&_approval.log: All approvals and unapprovals and freezings
	<action>:[secs()]:<name of staffer>:<dbref of staffer>:<reason>|...
&_approval.frozen: set with the log entry if currently frozen
&_approval.dead: set with log entry if currently dead



================================================================================
== REQUIRES ====================================================================

Requires TinyMUX 2.10+.

Requires creating user-defined functions, and therefore @restart.

Requires access to the `<game>.conf` file, and therefore @restart.

Requires Thenomain's "Jobs Request System" for "cg/submit", else ignore.
	
Requires the following user-defined functions:
	wheader()
	wfooter()
	isstaff()



================================================================================
== <GAME>.CONF =================================================================

Put the following in your `<gamename>.conf` file and restart. 
You may need to change the markers if you're already using them, but keep the 
names the same.

We might have been able to use the built-in "uninspected" flag, but left that 
for other code.

--

## flags ########################################
## flags: approval
flag_name marker0 approved
flag_name marker1 NPC
flag_name marker2 unapproved
flag_name marker3 storyteller

flag_access marker0 wizard
flag_access marker1 wizard
flag_access marker2 wizard
flag_access marker3 wizard



================================================================================
== @startup ====================================================================

I'm leaving this commented out, but if you allow objects to use @function, use 
this. Else, remember to have your function-creation object read here.
*/
@startup [v( d.cg )]=
	@dolist lattr( %!/ufunc.* )=
		@function/preserve [rest( ##, . )]=%!/##; 
	@dolist lattr( %!/ufunc/privileged.* )=
		@function/preserve/privileged [rest( ##, . )]=%!/##


/*
================================================================================
===== USER FUNCTION: ISAPPROVED ================================================

isapproved( <player>[, <status>] )

<player>: What it says on the tin
<status>: usually null, if not null, matches:
	staff: isstaff()
	approved: has 'approved' flag, is staff, npc, or storyteller (default)
	unapproved: has 'unapproved' flag
	npc: has 'npc' flag
	storyteller: has 'storyteller' flag
	frozen: has 'unapproved' flag, has &_frozen attribute
	dead: has 'unapproved' flag, has &_dead attribute
	guest: is a guest
	chargen: is not 'approved' nor is 'unapproved' (staff are always 'chargen')
	log: output _approval.log, which keeps track of approved/unapproved/dead


'Unapproved' specifically means that the person has once been approved and,
for one reason or another, no longer is.

*/

&d.approval_types [v( d.cg )]=
	chargen|guest|approved|storyteller|npc|staff|unapproved|frozen|dead

// --	

&ufunc.isapproved [v( d.cg )]=
	strcat( 
		setq( p, pmatch( %0 )), 
		setq( s, 
			grab( 
// [v( d.approval_types )] didn't work here, returned '1' to everything, why?
				|chargen|guest
				|approved|storyteller|npc|staff
				|unapproved|frozen|dead
				|status|log, 
				%1*, 
				| 
			)
		), 

		case( %qs, 
			@@( null ), 
			cor( 
				isstaff( %qp ), 
				hasflag( %qp, approved ), 
				hasflag( %qp, npc ), 
				hasflag( %qp, storyteller )
			), 

			approved, 
			isapproved( %qp ), 

			staff, 
			isstaff( %qp ), 

			frozen, 
			cand( not( isapproved( %qp )), hasattr( %qp, _approval.frozen )), 

			dead, 
			cand( not( isapproved( %qp )), hasattr( %qp, _approval.dead )), 
			
			chargen, 
			cor( 
				isstaff( %qp ), 
				not( cor( 
					isapproved( %qp ), 
					hasflag( %qp, unapproved ), 
					haspower( %qp, guest ), 
					strmatch( %qp, config( guest_char_num ))
				))
			), 

			guest, 
			haspower( %qp, guest ), 

			log, 
			default( %qp/_approval.log, #-1 no approval log ), 

// current approval status. yes, this is a mess. yes, it needs fixed. later.
			status, 
			case( 1, 
				isapproved( %qp, guest ), guest, 
				isapproved( %qp, staff ), staff, 
				isapproved( %qp, chargen ), chargen, 
				isapproved( %qp, npc ), npc, 
				isapproved( %qp, storyteller ), storyteller, 
				isapproved( %qp, approved ), approved, 
				isapproved( %qp, dead ), dead, 
				isapproved( %qp, frozen ), frozen, 
				isapproved( %qp, unapproved ), unapproved, 
				#-1 unknown approval status :: %qp :: %qs 
			), 

			hasflag( %qp, %qs )
		)
	)



/* 
================================================================================
== COMMANDS & SWITCHES =========================================================

cg/approve <name>=<comment>
	when done with cgen, full character status
	un-unapprove and un-freeze, but not un-kill
cg/npc
	done with cgen, turned into an NPC (flag set)
cg/storyteller
	when done with cgen, turned into a Storyteller (flag set)

cg/unapprove
	removes approval, npc, or storyteller status
	does not reinstate cgen ability
cg/freeze
	same as 'unapprove', but also sets frozen
cg/kill
	same as 'unapprove', but also sets dead

cg/chargen
	returns character to cgen
	un-unapprove and un-freeze, but not un-kill
	may be used any time by Wizards ONLY

cg/log
	What happened when. Display newest first. (It's stored newest last.)

*/


// -----------------------------------------------------------------------------
// -- cg/approve ---------------------------------------------------------------

&c.cg/approve [v( d.cg )]=$^\+?cg/approve( .*)$:

	@trigger %!/trig.approval.switch=
		%#, 
		%1, 
		approve, 
		approved, 
		chargen unapproved frozen

// --

@set v( d.cg )/c.cg/approve=regexp


// -----------------------------------------------------------------------------
// -- cg/approve: triggers -----------------------------------------------------

&trig.approval.switch/approve [v( d.cg )]=
	@set %1=approved !unapproved !frozen; 
	@set %1=_approval.frozen:; 


// -----------------------------------------------------------------------------
// -- cg/npc -------------------------------------------------------------------

&c.cg/npc [v( d.cg )]=$^\+?cg/npc( .*)$:
	@trigger %!/trig.approval.switch=
		%#, 
		%1, 
		npc, 
		NPC, 
		chargen

// --

@set v( d.cg )/c.cg/npc=regexp


// -----------------------------------------------------------------------------
// -- cg/npc: triggers ---------------------------------------------------------

&trig.approval.switch/npc [v( d.cg )]=
	@set %1=npc !unapproved !frozen; 
	@set %1=_approval.frozen:; 


// -----------------------------------------------------------------------------
// -- cg/storyteller -----------------------------------------------------------

&c.cg/storyteller [v( d.cg )]=$^\+?cg/storyteller( .*)$:
	@trigger %!/trig.approval.switch=
		%#, 
		%1, 
		storyteller, 
		storyteller, 
		chargen

// --

@set v( d.cg )/c.cg/storyteller=regexp

// -- use '/st' as alias for '/storyteller'

&c.cg/st [v( d.cg )]=$^\+?cg/st( .*)$:
	@trigger %!/trig.approval.switch=
		%#, 
		%1, 
		storyteller, 
		storyteller, 
		chargen

// --

@set v( d.cg )/c.cg/st=regexp


// -----------------------------------------------------------------------------
// -- cg/storyteller: triggers -------------------------------------------------

&trig.approval.switch/storyteller [v( d.cg )]=
	@set %1=storyteller !unapproved !frozen; 
	@set %1=_approval.frozen:; 


// -----------------------------------------------------------------------------
// -- cg/unapprove -------------------------------------------------------------

&c.cg/unapprove [v( d.cg )]=$^\+?cg/unapprove( .*)$:
	@trigger %!/trig.approval.switch=
		%#, 
		%1, 
		unapprove, 
		unapproved, 
		approved NPC storyteller

// --

@set v( d.cg )/c.cg/unapprove=regexp


// -----------------------------------------------------------------------------
// -- cg/unapprove: triggers ---------------------------------------------------

&trig.approval.switch/unapprove [v( d.cg )]=
	@set %1=unapproved !approved !npc !storyteller; 





// -----------------------------------------------------------------------------
// -- cg/chargen ---------------------------------------------------------------

&c.cg/chargen [v( d.cg )]=$^\+?cg/chargen( .*)$:
	@assert hasflag( %#, wizard )={ 
		@pemit %#=u( .msg, cg/chargen, Wizards only )
	}; 

	@trigger %!/trig.approval.switch=
		%#, 
		%1, 
		chargen, 
		chargen, 
		approved NPC storyteller frozen

// --

@set v( d.cg )/c.cg/chargen=regexp


// -----------------------------------------------------------------------------
// -- cg/chargen: triggers ---------------------------------------------------

&trig.approval.switch/chargen [v( d.cg )]=
	@set %1=!approved !unapproved !npc !storyteller; 
	@set %1=_approval.frozen:; 



// -----------------------------------------------------------------------------
// -- cg/freeze -------------------------------------------------------------

&c.cg/freeze [v( d.cg )]=$^\+?cg/freeze( .*)$:
	@trigger %!/trig.approval.switch=
		%#, 
		%1, 
		freeze, 
		frozen, 
		approved unapproved NPC storyteller

// --

@set v( d.cg )/c.cg/freeze=regexp


// -----------------------------------------------------------------------------
// -- cg/freeze: triggers ------------------------------------------------------

&trig.approval.switch/freeze [v( d.cg )]=
	@set %1=unapproved !approved !npc !storyteller; 
	@set %1=_approval.frozen:%2; 
	@name %1=[name( %1 )]_[rest( num( %1 ), # )]; 
	@alias %1; 



// -----------------------------------------------------------------------------
// -- cg/kill ------------------------------------------------------------------

&c.cg/kill [v( d.cg )]=$^\+?cg/kill(/YES)?( .*)$:
	@assert not( comp( %1, /YES ))={ 
		@pemit %#=u( .msg, cg/kill, 
			If you really want to do this%, type: 
			cg/kill/YES %2 
		)
	}; 

	@trigger %!/trig.approval.switch=
		%#, 
		%2, 
		kill, 
		dead, 
		approved unapproved frozen


// --

@set v( d.cg )/c.cg/kill=regexp


// -----------------------------------------------------------------------------
// -- cg/kill: triggers --------------------------------------------------------

&trig.approval.switch/kill [v( d.cg )]=
	@set %1=unapproved !approved !npc !storyteller; 
	@set %1=_approval.frozen:; 
	@set %1=_approval.dead:%2; 
	@pemit %0=u( .msg, cg/kill, Oh my god! You killed [moniker( %1 )]! )


// -----------------------------------------------------------------------------
// -- cg/log -------------------------------------------------------------------

&c.cg/log [v( d.cg )]=$^\+?cg/log(\s?.*)$:
	think strcat( 
		q1:%b, setr( 1, trim( %1 )), %r, 
		qp:%b, setr( p, if( strlen( %q1 ), pmatch( %q1 ), %# )), %r, 
		ql:%b, setr( l, revwords( isapproved( %qp, log ), | )), %r, 
	); 

	@assert t( %qp )={ 
		@pemit %#=u( .msg, cg/log, Character not found. )
	}; 

	@assert cor( strmatch( %#, %qp ), isstaff( %# ))={ 
		@pemit %#=u( .msg, cg/log, You can only look at your own approval log. )
	}; 

	@assert t( %ql )={ 
		@pemit %#=u( .msg, cg/log, No approval log to list. )
	}; 

	@pemit %#=u( display.approval.log, %#, %qp, %ql )


// --

@set v( d.cg )/c.cg/log=regexp


// -----------------------------------------------------------------------------
// -- cg/status ----------------------------------------------------------------
// What is your/player's current status

&c.cg/status [v( d.cg )]=$^\+?cg/status(\s?.*)$:
	think strcat( 
		q1:%b, setr( 1, trim( %1 )), %r, 
		qp:%b, setr( p, if( strlen( %q1 ), pmatch( %q1 ), %# )), %r, 
		qs:%b, setr( s, isapproved( %qp, status )), %r, 
	); 

	@assert t( %qp )={ 
		@pemit %#=u( .msg, cg/status, Character not found. )
	}; 

	@assert cor( strmatch( %#, %qp ), isstaff( %# ))={ 
		@pemit %#=u( .msg, cg/status, You can only look at your own status. )
	}; 

	@pemit %#=u( .msg, cg/status, 
		cat( 
			if( strmatch( %#, %qp ), 
				Your, [moniker( %qp )]'s
			), 
			approval status is:, 
			if( t( %qs ), 
				titlestr( edit( %qs, _, %b )), 
				Error %(%qs%) 
			)
		)
	); 


// --

@set v( d.cg )/c.cg/status=regexp






// =============================================================================
// == TRIGGERS =================================================================


/*
-----------------------------------------------------------------------------
-- Trigger: Do Approval/Unapproval Et al. -----------------------------------
0: %#
1: %1
2: switch name (e.g., 'approve')
3: isapproved() status we're moving to (e.g., 'approved')
4: list of isapproved() statuses that are valid to trigger from
   (e.g., 'approved npc storyteller' for unapproving)

p: player dbref
c: comment
a: current approval status (should be chargen, unapproved, or frozen)
r: resulting log entry (may be added to _approval.frozen or *.dead)

*/

&trig.approval.switch [v( d.cg )]=

	think strcat( 
		q1:%b, setr( 1, trim( %1 )), %r, 
		qp:%b, setr( p, pmatch( before( %q1, = ))), %r, 
		qc:%b, setr( c, strip( trim( rest( %q1, = )), : )), %r, 
		qa:%b, setr( a, isapproved( %qp, status )), %r, 
	); 

	@assert 
	cor( 
		isstaff( %0 ), 
		u( f.approval.not-self, %0, %q1 )
	)={ 
		@pemit %0=u( .msg, cg/%2, You can't %2 yourself. Nice try. ) 
	}; 

	@assert isstaff( %0 )={ 
		@pemit %0=u( .msg, cg/%2, Staff only. ) 
	}; 

	@assert %qp={ 
		@pemit %0=u( .msg, cg/%2, Character not found. )
	}; 

	@assert strlen( %qc )={ 
		@pemit %0=u( .msg, cg/%2, Please include comment. )
	}; 

	@assert t( grab( %4, %qa ))={ 
		@pemit %0=
			u( .msg, cg/%2, u( display.approve.change.error, %4, %qa ))
	}; 

	think setr( r, 
		u( f.approval.log.add, %0, %qp, %3, 
			u( format.approve.log-add.comment, %qa, %3, %qc )
		)
	); 

	@pemit %0=u( .msg, cg/%2, u( display.approval.change, %qp, %qa, %3, %qc )); 

	@trig %!/trig.approval.switch/%2=%0, %qp, %qr; 

/*
  -- triggers for sphere-specific settings and other systems --
  for games that want, e.g., "on approval, add to faction/bboard/channel",
  etc.
  
  template: for each template - 'default' is a panic case
  system: for systems with their own maintenance, like Facations
  
  trigger needs to know what switch you're using, generally for 
  approve or unapprove actions.
  
  0: enactor dbref (%#)
  p: target dbref
  2: switch name
  t: target's template
*/

	@trigger %!/trig.approval.template/
		[edit( setr( s, default( %qp/_bio.template, default )), %b, _ )]=
		%0, %qp, %2; 

	@dolist lattr( trig.approval.system/* )=
		@trigger ##=%0, %qp, %2, %qt;


/*
--------------------------------------------------------------------------------
-- Trigger: Template Trigger: Default ------------------------------------------

This should never be triggered, but is here in case someone makes it this far 
without a Template.

--

0: enactor dbref (%#)
1: target dbref
2: switch name

*/

&trig.approval.template/default [v( d.cg )]=
	@pemit %0=u( .msg, cg/%2, 
		Error: Somehow you got to template trigger code for '[name( %1 )]'%, 
		who has no Template. 
	)


/*
--------------------------------------------------------------------------------
-- Template Trigger: Changeling (sample)  --------------------------------------

Change things here as fits your game.

--

&trig.approval.template/changeling [v( d.cg )]=
	@switch/first 1=
// .. approve: set reality levels & add to factions
		t( match( approve npc storyteller, %2 )), 
		{
			@rxlevel %1=Fae; 
			@txlevel %1=Fae; 
			@dolist 
				Changeling 
				[get( [u( v( d.sfp )/f.find-sheet, %# )]/_bio.court )]=
			{ 
				@pemit %0=
					[u( v( d.afo )/c.faction/add, 
						##=[name( %1 )] 
					)];
			}; 
		}, 
		
// .. unapprove: unset reality levels - but be careful of someone with 'all'.
		t( match( unapprove freeze kill chargen, %2 )), 
		{ 
			@rxlevel %1=!Fae [setdiff( rxlevel( %1 ), Fae )]; 
			@txlevel %1=!Fae [setdiff( txlevel( %1 ), Fae )]; 
			@@ remove *all* factions on system/faction; 
		}, 

// .. else: do nothing
		think <trig changeling: do nothing>; 

*/


/*
--------------------------------------------------------------------------------
-- Trigger: Example System Trigger: Factions -----------------------------------

If you have the Aether Factions system installed, this should work.
"Should." Be careful about your game setup.

_FACTION-MEMBER
MEMBER-<dbref>


--

0: enactor dbref (%#)
1: target dbref
2: switch name
3: target's Template -- 'default' is error case and should never happen

--

@fo me=&d.afo [v( d.cg )]=[search( name=Aether's Faction Object <afo> )]

// --

&trig.approval.system/factions [v( d.cg )]=
	@switch/first 1=
// .. approve: add to factions: handle in 'template/<template_name>'
		t( match( approve npc storyteller, %2 )), 
		think 
		<add things - should that depend on template should go there>, 
	
// .. unapprove: remove from all factions
		t( match( unapprove freeze kill chargen, %2 )), 
		{ 
			@dolist/delim | [get( %1/_faction-member )]=
				{ 
					@wipe [rest( ##, ! )]/*-%1; 
				}; 
			&_faction-member %1=
		}, 

// .. else: do nothing
		think <trig factions: do nothing>; 

*/



// =============================================================================
// == FUNCTIONS ================================================================


// -----------------------------------------------------------------------------
// -- Global Functions ---------------------------------------------------------

&.msg [v( d.cg )]=ansi( h, <%0>, n, %b%1 )

&.plural [v( d.cg )]=cat( %0, if( eq( %0, 1 ), %1, %2 ))


// -----------------------------------------------------------------------------
// -- Function: Not Me ---------------------------------------------------------

// return '1' if target is not enactor or 'me'
// 0: %# (enactor)
// 1: raw input (target)

&f.approval.not-self [v( d.cg )]=
	cor( 
		strlen( %1 ), 
		not( strmatch( pmatch( %1 ), %0 )), 
		not( strmatch( %1, me ))
	)


// -----------------------------------------------------------------------------
// -- Function: Add to Approval Log --------------------------------------------

/* 
&_approval.log: All approvals and unapprovals and freezings
	<action>:[secs()]:<name of staffer>:<dbref of staffer>:<reason>|...

0: enactor
1: target
2: action
3: reason
*/

&f.approval.log.add [v( d.cg )]=
	localize( strcat( 
		set( %1, 
			_approval.log:
			[trim( 
				[get( %1/_approval.log )]|
				[setr( x, u( format.approval.log-item, %0, %1, %2, %3 ))], 
				l, | 
			)] 
		), 
		%qx 
	))


/*
-----------------------------------------------------------------------------
-- Function: Total Seconds Approved -----------------------------------------

How many seconds has someone been approved, not including unapproval periods?

1) get approval log
2) pull the seconds from the approval logs (%ql)
3) find location of all 'approved:' entries
4) subtract the next timestamp from each 'approved:' timestamps
5) add them together: this is total time approved

--

0: dbref
a: approval periods
l: length of time (generic register)
returns: number of seconds

*/


&f.total_secs_approved [v( d.cg )]=
	localize( 
		strcat( 
			setq( a, get( %0/_approval.log )), 
			setq( l, iter( %qa, elements( %i0, 2, : ), | )), 
			setq( l, if( t( %qa ), cat( %ql, secs( )))), 
			setq( a, matchall( %qa, approved:*, |  )), 

			ladd( 
				iter( 
					%qa, 
					sub( elements( %ql, inc( %i0 )), elements( %ql, %i0 ))
				)
			)
		)
	)




// =============================================================================
// == DISPLAYS & FORMATTING ====================================================


// -----------------------------------------------------------------------------
// -- Display: Approval Change Error -------------------------------------------

&display.approve.change.error [v( d.cg )]=
	Character must be [itemize( %0, , or )]. Character is [lcstr( %1 )].


// -----------------------------------------------------------------------------
// -- Display: Approval Change -------------------------------------------------

// 0: target dbref
// 1: status from (%qa)
// 2: status to
// 3: comment, optional (%qc)

&display.approval.change [v( d.cg )]=
	strcat( 
		moniker( %0 ), %b, 
		status changed from '%1' to '%2', 
		if( strlen( %3 ), %bwith comment '%3', )
	)


// -----------------------------------------------------------------------------
// -- Format: Log Add item -----------------------------------------------------

&format.approve.log-add.comment [v( d.cg )]=
	strcat( '%0' -> '%1', if( %2, %, %2 ))


// -----------------------------------------------------------------------------
// -- Format: One Log-Item -----------------------------------------------------
// (will be used by 'log.add', 'freeze', and 'dead'

&format.approval.log-item [v( d.cg )]=
	%2:[secs()]:[moniker( %0 )]:%0:%3


// -----------------------------------------------------------------------------
// -- Display: Approval Log ----------------------------------------------------
// 0: enactor (%#)
// 1: target (%qp)
// 2: log (%ql) : <action>:<timestamp>:<staffer name>:<dbref>:<comments>
// 
// a: length of longest action
// t: length of longest timestamp (from &format.approval.timestamp)
// s: length of longest staffer name (#dbref)

&display.approval.log [v( d.cg )]=
	localize( strcat( 
		setq( a, 
			lmax( iter( %2, strlen( elements( %i0, 1, : )), | ))
		), 

		setq( t, 
			lmax( 
				iter( %2, 
					strlen( 
						u( format.approval.timestamp, elements( %i0, 2, : ))
					), 
					| 
				)
			)
		), 

		setq( s, 
			lmax( iter( %2, 
				add( 
					strlen( elements( %i0, 3, : )), 
					strlen( elements( %i0, 4, : )), 
					3, // for '%b()'
				), 
				| 
			))
		), 
		
		wheader( Approval Log for [moniker( %1 )] ), %r, 
		iter( %2, 
			wrap( 
				u( format.approval.log.line, %i0, %qa, %qt, %qs, * ), 
				width( %0 ), 
				@@( just ), 
				@@( lefttext ), 
				@@( righttext ), 
				add( %qa, %qt, %qs, 9 )
			), 
			|, %r 
		), %r, 
		wfooter( u( .plural, words( %2, | ), entry, entries ))
	))


// -----------------------------------------------------------------------------
// -- Format: Approval Log, One Line -------------------------------------------
// 0: line
// 1: width of cell 1
// 2: width of cell 2
// 3: width of cell 3
// 4: width of cell 4 (ignored)

&format.approval.log.line [v( d.cg )]=
	cat( 
		ljust( titlestr( edit( elements( %0, 1, : ), _, %b )), %1 ), %b, 
		ljust( u( format.approval.timestamp, elements( %0, 2, : )), %2 ), %b, 
		ljust( 
			[elements( %0, 3, : )] %([elements( %0, 4, : )]%), 
			%3 
		), %b, 
		trim( rest( elements( %0, 5, : ), %, ))
	)


// -----------------------------------------------------------------------------
// -- Format: Timestamp --------------------------------------------------------
// 0: timestamp in seconds

&format.approval.timestamp [v( d.cg )]=
	timefmt( $H:$M $d.$m.$y, %0 )




/*
================================================================================
== BASIC HELP ==================================================================

All commands have the leading '+' as an option. No harm if you use it.

	cg/status [<character>]
		What's your/character's approval status?
	cg/log [<character>]
		Check your/character's approval log

	cg/approve <character>[=<comment>]
		Approve <character> for RP.
		Can be from: Chargen, Unapproved, Frozen

	cg/npc <character>[=<comment>]
		Make <character> an approved NPC. (For use by other systems.)
		Can be from: Chargen
		
	cg/storyteller <character>[=<comment>]
	cg/st <character>[=<comment>]
		Make <character> an approved Storyteller. (For use by other systems.)
		Can be from: Chargen
		
	cg/unapprove <character>[=<comment>]
		Remove <character>'s approval status.
		Can be from: Approved, NPC, Storyteller

	cg/chargen <character>[=<comment>]
		Remove <character>'s approval status.
		Can be from: Approved, NPC, Storyteller

	cg/freeze <character>[=<comment>]
		Remove <character>'s approval status and give them 'frozen' status.
		Can be from: Approved, NPC, Storyteller, Unapproved

	cg/kill <character>[=<comment>]
		Remove <character>'s approval status and give them 'dead' status.
		Can be from: Approved, NPC, Storyteller, Unapproved, Frozen
		NOTES: 
			No approve/unapprove switches can be done fron a dead character.

	isapproved( <character> )
		Is character approved?

	isapproved( <character>, status )
		What is the current approval status of <character>?

	isapproved( <character>, <status> )
		Would <character> pass a <status> check?
		NOTES: 
			NPC and Storyteller pass 'approved'
			Frozen and Dead pass 'unapproved'

	STATUSES:
		chargen: never approved
		approved: fully approved and RPable character
		npc: RPable NPC, may be limited by other systems, 'approved'
		storyteller: RPable ST, may be limited by other systems, 'approved'
		unapproved: once approved but no more
		frozen: 'unapproved', may be limited by other systems
		dead: 'unapproved', may be limited by other systems, cannot be undone	




################################################################################
## CG/SUBMIT ###################################################################

This is an add-on to the Jobs Request System (found in a very different file).

When someone is convinced that they are ready for approval, they will type 
'cg/submit' and the jobs system will take it from there.

When a staffer is convinced they're ready, they will use 'cg/approve'.

Neither of these systems run 'cg/check'! It's up to staff to do it right!

The rest is about dancing.

*/

@fo me=&d.jrs me=[search( name=Jobs Request System <jrs> )]

// 3 aspirations (2 short-term, 1 long-term)

&d.content.cg/submit [v( d.jrs )]=
	Hello! This job is generated by 'cg/submit', asking staff to 
	approve your character for role-play. They will be doing four things: %r%r
	%b %b 1) Checking your stats : cg/check [name( %# )] %r
	%b %b 2) Approving your Aspirations : %r
	%b%b %b %b - asp/list [name( %# )] %r
	%b%b %b %b - asp/approve [name( %# )]/<number> %r
	%b %b 3) Checking for your Breaking Points : +notes [name( %# )] %r
	%b %b 4) Reading your backgrounds : bgcheckall [name( %# )] %r
	%r
	If they think everything is okay, they will 'cg/approve' you and complete 
	this job.%r%r
	Keep an eye on '+myjobs' and your '@mail' to see if they have any questions 
	or issues that need resolving.%r
	%r
	-- %r%r
	Staff must ALWAYS use 'cg/check' before 'cg/approve'.

// --

think u( [v( d.jrs )]/d.content.cg/submit )

// --

&c.cg/submit [v( d.jrs )]=$^\+?cg/submit:
	@assert isapproved( %#, chargen )={ 
		@pemit %#=
			u( .msg, cg/submit, 
				You can only ask to be approved when you're in chargen. 
			)
	}; 

	@trigger %!/trig.command.request=
		/cgsubmit [moniker( %# )]=[u( d.content.cg/submit, %# )], 
		%#; 

@set v( d.jrs )/c.cg/submit=regexp

&d.cgsubmit.bucket [v( d.jrs )]=APPS

&d.cgsubmit.assign [v( d.jrs )]=+allstaff

&d.cgsubmit.msg [v( d.jrs )]=

&d.cgsubmit.prefix [v( d.jrs )]=CGEN

