/*
################################################################################
## WEREWOLF: THE FORSAKEN ######################################################

This file includes all additions to the system for Werewolf: The Forsaken 
core rules


--------------------------------------------------------------------------------
-- Pre-Setting Attributes ------------------------------------------------------

If you don't have the attributes set on yourself, run this code:

@fo me=&d.sfp me=search( name=Stat Functions Prototype <sfp> )
@fo me=&d.dd me=search( name=Data Dictionary <dd> )
@fo me=&d.dt me=search( name=Data Tags <d:t> )

@fo me=&d.xpas me=search( name=XP Advancement System <xpas> )
@fo me=&d.xpcd me=search( name=XP Cost Database <xpcd> )

@fo me=&d.cg me=search( name=GMC Chargen <cg> )
@fo me=&d.sheet me=search( name=Sheet: Rows )

@fo me=&d.psrs me=search( name=Pool Spend Regain System <psrs> )




################################################################################
## WEREWOLF: STAT FUNCTIONS ####################################################

--------------------------------------------------------------------------------
-- SFP: Search Order -----------------------------------------------------------

Level 2 for powers 
Level 3 for very minor items
*/

&d.search-order-02-werewolf [v( d.sfp )]=renown gift
&d.search-order-03-werewolf [v( d.sfp )]=rite




/*
################################################################################
## WEREWOLF: DATA DICTIONARY ###################################################



================================================================================
== DD: SETUP ===================================================================

Stuff we need to put on the Data Dictionary

*/

// CODP prefixes
&prefix.werewolf_-_gifts [v( d.dd )]=gift.
&prefix.werewolf_-_gifts [v( d.dt )]=tags.gift.

&prefix.werewolf_-_rites [v( d.dd )]=rite.
&prefix.werewolf_-_rites [v( d.dt )]=tags.rite.


// add to templates
@fo me=&bio.template [v( d.dd )]=[get( v( d.dd )/bio.template )].Werewolf.Wolf-Blooded


// register "max trait" statpath
&.max_trait.werewolf [v( d.dd )]=advantage.primal_urge


// register "sphere"'s templates (could this be folded into 'templates'?)
&.sphere.werewolf [v( d.dd )]=Werewolf Wolf-Blooded

// -- DD: Tags for Wolf-Blooded ------------------------------------------------

@edit [v( d.dt )]/tags.advantage.integrity=$, .wolf-blooded



/*
================================================================================
== WEREWOLF BIO ================================================================

&bio.xxx [v( d.dd )]=...
&tags.bio.xxx [v( d.dt )]=werewolf
*/

&bio.pack [v( d.dd )]=*
&tags.bio.pack [v( d.dt )]=werewolf.wolf-blooded.clique

&bio.blood [v( d.dd )]=Alpha.Challenger.Destroyer.Fox.Monster.Soldier.
&tags.bio.blood [v( d.dt )]=werewolf

&bio.bone [v( d.dd )]=Community Organizer.Cub.Guru.Hedonist.Lone Wolf.Wallflower
&tags.bio.bone [v( d.dt )]=werewolf

&bio.auspice [v( d.dd )]=Cahalith.Elodoth.Irraka.Ithaeur.Rahu
&tags.bio.auspice [v( d.dt )]=werewolf

&bio.tribe [v( d.dd )]=
	Blood Talons.Bone Shadows.Hunters in Darkness.Iron Masters.Storm Lords.
	Ghost Wolves
&default.bio.tribe [v( d.dd )]=Ghost Wolves
&tags.bio.tribe [v( d.dt )]=werewolf



/*
================================================================================
== DATA DICTIONARY =============================================================

Werewolf Stat Checks 
	.Auspice_Skill_Check : drives both skills and cgen

	0: sheet dbref
	1: statpath to check
*/

&.Auspice_Skill_Check [v( d.dd )]=
	t( setinter( 
		%1, 
		v( d.auspice.skills.[u( .value_full, %0, bio.auspice )] ), , , i
	))

&d.auspice.skills.cahalith [v( d.dd )]=
	skill.crafts skill.expression skill.persuasion
&d.auspice.skills.elodoth [v( d.dd )]=
	skill.empathy skill.investigation skill.politics
&d.auspice.skills.irraka [v( d.dd )]=
	skill.larceny skill.stealth skill.subterfuge
&d.auspice.skills.ithaeur [v( d.dd )]=
	skill.animal_ken skill.medicine skill.occult
&d.auspice.skills.rahu [v( d.dd )]=
	skill.brawl skill.intimidation skill.survival



/*
================================================================================
== WEREWOLF ADVANTAGES =========================================================

&advantage.xxx [v( d.dd )]=
&tags.advantage.xxx [v( d.dt )]=werewolf
*/

// 'Harmony' is now 'Integrity'
@edit [v( d.dt )]/tags.advantage.integrity=$, .werewolf

&advantage.primal_urge [v( d.dd )]=1.2.3.4.5.6.7.8.9.10
&default.advantage.primal_urge [v( d.dd )]=1
&tags.advantage.primal_urge [v( d.dt )]=power.werewolf

&advantage.essence [v( d.dd )]=
	ladd( u( .value_full, %0, advantage.essence_maximum ), . )
&default.advantage.essence [v( d.dd )]=derived
&tags.advantage.essence [v( d.dt )]=derived.werewolf

&advantage.essence_maximum [v( d.dd )]=
	elements( 
		10 11 12 13 14 15 20 30 50 100, 
		u( .value, %0, advantage.primal_urge )
	)
&default.advantage.essence_maximum [v( d.dd )]=derived
&tags.advantage.essence_maximum [v( d.dt )]=derived.werewolf

&health.maximum.werewolf [v( d.dd )]=
	case( 1, 
		u( .list_has, %0, gift.full_moon's_gift, 2 ), 
		u( .value_stats, %0, renown.purity ), 
		0 
	)



/* 
================================================================================
== WEREWOLF RENOWN =============================================================

Cunning, Glory, Honor, Purity, and Wisdom

Effective Rank.
*/

&renown.cunning [v( d.dd )]=1.2.3.4.5
&tags.renown.cunning [v( d.dt )]=werewolf.irraka.iron masters

&renown.glory [v( d.dd )]=1.2.3.4.5
&tags.renown.glory [v( d.dt )]=werewolf.cahalith.blood talons

&renown.honor [v( d.dd )]=1.2.3.4.5
&tags.renown.honor [v( d.dt )]=werewolf.elodoth.storm lords

&renown.purity [v( d.dd )]=1.2.3.4.5
&tags.renown.purity [v( d.dt )]=werewolf.rahu.hunters in darkness

&renown.wisdom [v( d.dd )]=1.2.3.4.5
&tags.renown.wisdom [v( d.dt )]=werewolf.ithaeur.bone shadows

&advantage.effective_rank [v( d.dd )]=
	switch( ladd( iter( lattr( %0/_renown.* ), first( get( %0/%i0 ), . ))), 
		<4, 1, 
		<8, 2, 
		<13, 3, 
		<19, 4, 
		<26, 5, 
		0 
	)
&default.advantage.effective_rank [v( d.dd )]=derived
&tags.advantage.effective_rank [v( d.dt )]=werewolf.derived



/*
================================================================================
== WEREWOLF MERITS =============================================================
*/

// -- Merits: Cross-Sphere -----------------------------------------------------

// Merit.Producer, from Vampire Core

@if cand( 
		hasattr( v( d.dd ), merit.producer ), 
		not( match( get( v( d.dt )/tags.merit.producer ), wolf-blooded, . )) 
	)={ 
		@edit [v( d.dt )]/tags.merit.producer=$, .wolf-blooded
	}


// -- Merits: Wolf-Blooded -----------------------------------------------------

&merit.pack_bond [v( d.dd )]=1.3
&tags.merit.pack_bond [v( d.dt )]=wolf-blooded

&merit.tell_() [v( d.dd )]=3|
	A Wolf's Meat.Anger Issues.Bite.Bitten.Clever Fingers.Devil Inside.
	Evil Eye.Exciting.Familiar.Fuck Ugly.Horse.Host-Ache.Liar's Skin.Marker.
	Moon Marked.Phantom Pack.Piercing Eyes.Second Skin.Shape-Shifted.
	Shadow Twin.Skinner.Spirit Double.Strong Scent.Third Nipple.Tongues.
	Waystone.Wolf Sign
&tags.merit.tell_() [v( d.dt )]=wolf-blooded

&merit.raised_by_wolves [v( d.dd )]=1
&tags.merit.raised_by_wolves [v( d.dt )]=wolf-blooded

// Wolf-Blooded Merits: Tribal Affinity

&merit.fenris-ur's_blood [v( d.dd )]=2
&prerequisite.merit.fenris-ur's_blood [v( d.dd )]=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			tribal affinity, 0 
		)), 
		1 
	)
&prereq-text.merit.fenris-ur's_blood [v( d.dd )]=
	Only one Tribal Affinity merit allowed
&tags.merit.fenris-ur's_blood [v( d.dt )]=wolf-blooded.tribal affinity

&merit.kamduis-ur's_blood [v( d.dd )]=2
&prerequisite.merit.kamduis-ur's_blood [v( d.dd )]=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			tribal affinity, 0 
		)), 
		1 
	)
&prereq-text.merit.kamduis-ur's_blood [v( d.dd )]=
	Only one Tribal Affinity merit allowed
&tags.merit.kamduis-ur's_blood [v( d.dt )]=wolf-blooded.tribal affinity

&merit.hikaon-ur's_blood [v( d.dd )]=2
&prerequisite.merit.hikaon-ur's_blood [v( d.dd )]=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			tribal affinity, 0 
		)), 
		1 
	)
&prereq-text.merit.hikaon-ur's_blood [v( d.dd )]=
	Only one Tribal Affinity merit allowed
&tags.merit.hikaon-ur's_blood [v( d.dt )]=wolf-blooded.tribal affinity

&merit.sagrim-ur's_blood [v( d.dd )]=2
&prerequisite.merit.sagrim-ur's_blood [v( d.dd )]=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			tribal affinity, 0 
		)), 
		1 
	)
&prereq-text.merit.sagrim-ur's_blood [v( d.dd )]=
	Only one Tribal Affinity merit allowed
&tags.merit.sagrim-ur's_blood [v( d.dt )]=wolf-blooded.tribal affinity

&merit.skolis-ur's_blood [v( d.dd )]=2
&prerequisite.merit.skolis-ur's_blood [v( d.dd )]=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			tribal affinity, 0 
		)), 
		1 
	)
&prereq-text.merit.skolis-ur's_blood [v( d.dd )]=
	Only one Tribal Affinity merit allowed
&tags.merit.skolis-ur's_blood [v( d.dt )]=wolf-blooded.tribal affinity

&merit.ghost_child [v( d.dd )]=2
&prerequisite.merit.ghost_child [v( d.dd )]=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			tribal affinity, 0 
		)), 
		1 
	)
&prereq-text.merit.ghost_child [v( d.dd )]=
	Only one Tribal Affinity merit allowed
&tags.merit.ghost_child [v( d.dt )]=wolf-blooded.tribal affinity


// Wolf-Blooded Merits: Moon Birth

&merit.crescent_moon's_birth [v( d.dd )]=2
&prerequisite.merit.crescent_moon's_birth [v( d.dd )]=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			moon birth, 0 
		)), 
		1 
	)
&prereq-text.merit.crescent_moon's_birth [v( d.dd )]=
	Only one Moon Birth merit allowed
&tags.merit.crescent_moon's_birth [v( d.dd )]=wolf-blooded.moon birth

&merit.full_moon's_birth [v( d.dd )]=2
&prerequisite.merit.full_moon's_birth [v( d.dd )]=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			moon birth, 0 
		)), 
		1 
	)
&prereq-text.merit.full_moon's_birth [v( d.dd )]=
	Only one Moon Birth merit allowed
&tags.merit.full_moon's_birth [v( d.dd )]=wolf-blooded.moon birth

&merit.gibbous_moon's_birth_() [v( d.dd )]=2|
	Academics.Computer.Crafts.Investigation.Medicine.Occult.Politics.Science
&prerequisite.merit.gibbous_moon's_birth_() [v( d.dd )]=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			moon birth, 0 
		)), 
		1 
	)
&prereq-text.merit.gibbous_moon's_birth_() [v( d.dd )]=
	Only one Moon Birth merit allowed.
&tags.merit.gibbous_moon's_birth_() [v( d.dd )]=wolf-blooded.moon birth

&merit.half_moon's_birth [v( d.dd )]=2
&prerequisite.merit.half_moon's_birth [v( d.dd )]=
	cand( 
		lte( 
			words( filter( 
				u( d.sfp )/f.hastag?.workhorse, 
				edit( 
					lattr( %0/_merit.* ), 
					_MERIT., 
					MERIT. 
				), , , 
				moon birth, 0 
			)), 
			1 
		), 
		t( lattr( %0/_merit.safe_place_(*) ))
	)
&prereq-text.merit.half_moon's_birth [v( d.dd )]=
	Only one Moon Birth merit allowed, 
	Must Have Safe Place 1+
&tags.merit.half_moon's_birth [v( d.dd )]=wolf-blooded.moon birth

&merit.no_moon's_birth [v( d.dd )]=2
&prerequisite.merit.no_moon's_birth [v( d.dd )]=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			moon birth, 0 
		)), 
		1 
	)
&prereq-text.merit.no_moon's_birth [v( d.dd )]=
	Only one Moon Birth merit allowed
&tags.merit.no_moon's_birth [v( d.dd )]=wolf-blooded.moon birth


// -- Merits: Werewolf ---------------------------------------------------------

&merit.anchored_() [v( d.dd )]=1.2|*
&tags.merit.anchored_() [v( d.dt )]=werewolf.mental

&merit.blood_or_bone_affinity [v( d.dd )]=2.5|Blood.Bone.Both
&prerequisite.merit.blood_or_bone_affinity [v( d.dd )]=
	u( .between, %0, advantage.integrity, 3, 8 )
&prereq-text.merit.blood_or_bone_affinity [v( d.dd )]=Harmony 3 to 8
&tags.merit.blood_or_bone_affinity [v( d.dt )]=werewolf.mental.integrity
&notes.merit.blood_or_bone_affinity [v( d.dt )]=Staff should also: 
	stat/set <player>/blood or bone affinity.<which one>=1

&merit.code_of_honor [v( d.dd )]=2
&prerequisite.merit.code_of_honor [v( d.dd )]=
	u( .at_least, %0, advantage.integrity, 8 )
&prereq-text.merit.code_of_honor [v( d.dd )]=Harmony 8+
&tags.merit.code_of_honor [v( d.dt )]=werewolf.mental.integrity

&merit.controlled_burn [v( d.dd )]=2
&prerequisite.merit.controlled_burn [v( d.dd )]=
	u( .at_least_all, %0, attribute.resolve:3 attribute.composure:3 )
&prereq-text.merit.controlled_burn [v( d.dd )]=Resolve 3, Composure 3
&tags.merit.controlled_burn [v( d.dt )]=werewolf.mental

&merit.creative_tactician [v( d.dd )]=3
&prerequisite.merit.creative_tactician [v( d.dd )]=
	u( .at_least, %0, renown.purity, 2 )
&prereq-text.merit.creative_tactician [v( d.dd )]=Purity 2
&tags.merit.creative_tactician [v( d.dt )]=werewolf.mental.purity

&merit.dedicated_locus_() [v( d.dd )]=1.2.3.4.5|*
&prerequisite.merit.dedicated_locus_() [v( d.dd )]=
	u( .has, %0, merit.safe_place_(%1) )
&prereq-text.merit.dedicated_locus_() [v( d.dd )]=Has Safe Place (<place name>)
&tags.merit.dedicated_locus_() [v( d.dt )]=werewolf.location

&merit.embodiment_of_the_firstborn_() [v( d.dd )]=
	5|
	Intelligence.Wits.Resolve.
	Strength.Dexterity.Stamina.
	Presence.Manipulation.Composure
&prerequisite.merit.embodiment_of_the_firstborn_() [v( d.dd )]=
	cand( 
		u( .is_not, %0, bio.tribe, Ghost Wolves ), 
		not( lattr( %0/_merit.emobdiment_of_the_firstborn_(*) )) 
	)
&prereq-text.merit.embodiment_of_the_firstborn_() [v( d.dd )]=
	May not be taken if Tribe is Ghost Wolf, may only be taken once
&tags.merit.embodiment_of_the_firstborn_() [v( d.dt )]=werewolf.physical
&notes.merit.embodiment_of_the_firstborn_() [v( d.dt )]=
    Chargen: Increased stat must be set manually with: stat/set <stat> + 1|
    After: Staff must use: xp/freebie <name>/<stat> for Embodiment of the 
    Firstborn

&merit.fading [v( d.dd )]=3
&prerequisite.merit.fading [v( d.dd )]=u( .at_least, %0, renown.cunning, 2 )
&prereq-text.merit.fading [v( d.dd )]=Cunning 2
&tags.merit.fading [v( d.dt )]=werewolf.physical.cunning

&merit.favored_form_() [v( d.dd )]=1.2.3.4.5|Dalu.Gauru.Urshul.Urhan|*
&prerequisite.merit.favored_form_() [v( d.dd )]=
	cand( 
		u( .at_most_stat, %0, 
			merit.favored_form_(%1), 
			advantage.primal_urge - 1, %2 
		), 
		not( 
			setdiff( 
				lattr( %0/_merit.favored_form_(*) ), 
				_MERIT.FAVORED_FORM_([ucstr( %1 )]) 
			)
		)
	)
&prereq-text.merit.favored_form_() [v( d.dd )]=
	Primal Urge 1 higher than Merit rating, Cannot take any other Favored Forms 
&tags.merit.favored_form_() [v( d.dt )]=werewolf.physical
&notes.merit.favored_form_() [v( d.dt )]=
	For each dot, set a substat with the name of the stat affected and the value 
	of Favored Form it was gained at. 
	e.g.: stat/set <name>/favored form (urhan).stealth=1
// +shift MUST respect this stat

&merit.fortified_form_() [v( d.dd )]=3.4.5|Dalu.Gauru.Urshul.Urhan
&prerequisite.merit.fortified_form_() [v( d.dd )]=
	u( .at_least_all, %0, attribute.stamina:3 skill.survival:2 )
&prereq-text.merit.fortified_form_() [v( d.dd )]=Stamina 3, Survival 2
&tags.merit.fortified_form_() [v( d.dt )]=werewolf.physical
// +shift MIGHT respect this stat

&merit.hearing_whispers [v( d.dd )]=2
&prerequisite.merit.hearing_whispers [v( d.dd )]=
	u( .is, %0, bio.tribe, Bone Shadows )
&prereq-text.merit.hearing_whispers [v( d.dd )]=Tribe is Bone Shadows
&tags.merit.hearing_whispers [v( d.dt )]=werewolf.bone shadows.mental

&merit.impartial_mediator [v( d.dd )]=3
&prerequisite.merit.impartial_mediator [v( d.dd )]=
	u( .at_least, %0, renown.honor, 2 )
&prereq-text.merit.impartial_mediator [v( d.dd )]=Honor 2
&tags.merit.impartial_mediator [v( d.dt )]=werewolf.social.honor

&merit.living_weapon_() [v( d.dd )]=3.4.5|Dalu.Gauru.Urshul.Urhan
&prerequisite.merit.living_weapon_() [v( d.dd )]=
	u( .at_least_all, %0, attribute.stamina:3 skill.survival:2 )
&prereq-text.merit.living_weapon_() [v( d.dd )]=Stamina 3, Survival 2
&tags.merit.living_weapon_() [v( d.dt )]=werewolf.physical

&merit.moon-kissed_() [v( d.dd )]=1|
	Academics.Computer.Crafts.Investigation.Medicine.Occult.Politics.Science.
	Athletics.Brawl.Drive.Firearms.Larceny.Stealth.Survival.Weaponry.
	Animal Ken.Empathy.Expression.Intimidation.Persuasion.Socialize.Streetwise.
	Subterfuge
&prerequisite.merit.moon-kissed_() [v( d.dd )]=
	cand( 
		u( .at_least, %0, skill.%1, 2 ), 
		u( .auspice_skill_check, %0, skill.%1 )
	)
&prereq-text.merit.moon-kissed_() [v( d.dd )]=
	Type must be an Auspice Skill at 2+
&tags.merit.moon-kissed_() [v( d.dt )]=werewolf
&notes.merit.moon-kissed_() [v( d.dt )]=
	When taking this Merit, choose one of her three auspice Skills. That Skill 
	has the 9-again quality. If you already have 9-again available, use 8-again.

&merit.nowhere_to_run [v( d.dd )]=2
&prerequisite.merit.nowhere_to_run [v( d.dd )]=
	u( .is, %0, bio.tribe, Hunters in Darkness )
&prereq-text.merit.nowhere_to_run [v( d.dd )]=Tribe is Hunters in Darkness
&tags.merit.nowhere_to_run [v( d.dt )]=werewolf.hunters in darkness

&merit.pack_dynamics [v( d.dd )]=3.4.5
&tags.merit.pack_dynamics [v( d.dt )]=werewolf.pack.social

&merit.residential_area [v( d.dd )]=1.2.3.4.5
&tags.merit.residential_area [v( d.dt )]=werewolf.social.location

&merit.resonance_shaper [v( d.dd )]=3
&prerequisite.merit.resonance_shaper [v( d.dd )]=
	u( .at_least, %0, renown.wisdom, 2 )
&prereq-text.merit.resonance_shaper [v( d.dd )]=Wisdom 2
&tags.merit.resonance_shaper [v( d.dt )]=werewolf.mental.wisdom

&merit.self-control [v( d.dd )]=2
&prerequisite.merit.self-control [v( d.dd )]=
	u( .at_least, %0, attribute.resolve, 4 )
&prereq-text.merit.self-control [v( d.dd )]=Resolve 4
&tags.merit.self-control [v( d.dt )]=werewolf.physical

&merit.song_in_your_heart [v( d.dd )]=3
&prerequisite.merit.song_in_your_heart [v( d.dd )]=
	u( .at_least, %0, renown.glory, 2 )
&prereq-text.merit.song_in_your_heart [v( d.dd )]=Glory 2
&tags.merit.song_in_your_heart [v( d.dt )]=werewolf.glory.social

&merit.sounds_of_the_city [v( d.dd )]=2
&prerequisite.merit.sounds_of_the_city [v( d.dd )]=
	u( .is, %0, bio.tribe, Iron Masters )
&prereq-text.merit.sounds_of_the_city [v( d.dd )]=Tribe is Iron Masters
&tags.merit.sounds_of_the_city [v( d.dt )]=werewolf.iron masters.social

&merit.strings_of_the_heart [v( d.dd )]=2
&prerequisite.merit.strings_of_the_heart [v( d.dd )]=
	u( .is, %0, bio.tribe, Storm Lords )
&prereq-text.merit.strings_of_the_heart [v( d.dd )]=Tribe is Storm Lords
&tags.merit.strings_of_the_heart [v( d.dt )]=werewolf.storm lords.social

// totem can be bought to 1 or 5 for wolf-blooded with merit.pack_bond
&merit.totem [v( d.dd )]=1.2.3.4.5
&prerequisite.merit.totem [v( d.dd )]=
  localize( if( 
		u( .is_full, %0, bio.template, wolf-blooded ), 
		case( 
			setr( 9, u( .value, %0, merit.pack_bond )), 
			1, lte( add( u( .value, %0, merit.totem ), %2 ), 1 ), 
			3, lte( add( u( .value, %0, merit.totem ), %2 ), 5 ), 
			0 
		), 
		1 
	))
&prereq-text.merit.totem [v( d.dd )]=Wolf-Blooded must have Pack Bond merit 
	at 1 for 1, at 3 for up to 5
&tags.merit.totem [v( d.dt )]=werewolf.wolf-blooded.shared

&merit.weakest_link [v( d.dd )]=2
&prerequisite.merit.weakest_link [v( d.dd )]=
	u( .is, %0, bio.tribe, Blood Talons )
&prereq-text.merit.weakest_link [v( d.dd )]=Tribe is Blood Talons
&tags.merit.weakest_link [v( d.dt )]=werewolf.blood talons.social


// -- Merits: Fighting Merits --------------------------------------------------

&merit.call_out [v( d.dd )]=2
&prerequisite.merit.call_out [v( d.dd )]=
	u( .at_least_all, %0, 
		renown.honor:3 attribute.composure:3 skill.intimidation:2 
	)
&prereq-text.merit.call_out [v( d.dd )]=Honor 2, Intimidation 2, Composure 3
&tags.merit.call_out [v( d.dt )]=werewolf.fighting.honor

&merit.efficient_killer [v( d.dd )]=2
&prerequisite.merit.efficient_killer [v( d.dd )]=
	u( .at_least_all, %0, 
		renown.purity:2 attribute.strength:3 skill.brawl:3 skill.medicine:2 
	)
&prereq-text.merit.efficient_killer [v( d.dd )]=
	Purity 2, Brawl 3, Medicine 2, Strength 3
&tags.merit.efficient_killer [v( d.dt )]=werewolf.fighting.purity
&notes.merit.efficient_killer [v( d.dt )]=May only be used in Gauru form

&merit.flanking [v( d.dd )]=2
&prerequisite.merit.flanking [v( d.dd )]=
	u( .at_least_all, %0, 
		renown.cunning:2 attribute.wits:3 skill.stealth:2 skill.brawl:2 
	)
&prereq-text.merit.flanking [v( d.dd )]=Cunning 2, Wits 3, Stealth 2, Brawl 2
&tags.merit.flanking [v( d.dt )]=werewolf.fighting.cunning

&merit.instinctive_defense [v( d.dd )]=2
&prerequisite.merit.instinctive_defense [v( d.dd )]=
	u( .at_least_all, %0, advantage.primal_urge:2 skill.athletics:2 )
&prereq-text.merit.instinctive_defense [v( d.dd )]=Primal Urge 2, Athletics 2
&tags.merit.instinctive_defense [v( d.dt )]=werewolf.fighting

&merit.relentless_assault [v( d.dd )]=1.2.3.4.5
&prerequisite.merit.relentless_assault [v( d.dd )]=
	u( .at_least_all, %0, 
		attribute.strength:3 attribute.stamina:3 skill.brawl:2 
	)
&prereq-text.merit.relentless_assault [v( d.dd )]=Strength 3, Stamina 3, Brawl 2
&tags.merit.relentless_assault [v( d.dt )]=werewolf.style.fighting

&merit.spiritual_blockage [v( d.dd )]=2
&prerequisite.merit.spiritual_blockage [v( d.dd )]=
	u( .at_least_all, %0, 
		renown.wisdom:2 attribute.wits:3 skill.brawl:1 skill.occult:3 
	)
&prereq-text.merit.spiritual_blockage [v( d.dd )]=
	Wisdom 2, Brawl 1, Occult 3, Wits 3
&tags.merit.spiritual_blockage [v( d.dt )]=werewolf.fighting.wisdom

&merit.tactical_shifting [v( d.dd )]=1.2.3.4.5
&prerequisite.merit.tactical_shifting [v( d.dd )]=
	u( .at_least_all, %0, 
		attribute.wits:3 attribute.dexterity:3 skill.athletics:2 
	)
&prereq-text.merit.tactical_shifting [v( d.dd )]=
	Wits 3, Dexterity 3, Athletics 2
&tags.merit.tactical_shifting [v( d.dt )]=werewolf.style.fighting

&merit.warcry [v( d.dd )]=2
&prerequisite.merit.warcry [v( d.dd )]=
	u( .at_least_all, %0, 
		renown.glory:2 attribute.presence:3 skill.expression:2 
		skill.intimidation:2 
	)
&prereq-text.merit.warcry [v( d.dd )]=
	Glory 2, Presence 3, Expression 2, Intimidation 2
&tags.merit.warcry [v( d.dt )]=werewolf.style.fighting.glory
&notes.warcry [v( d.dt )]=May only be used in Gauru, Urshul, or Urhan form



/*
================================================================================
== WEREWOLF RITES ==============================================================

Vampire also uses the 'rite' stat type, and it's also always a 'flag'.

*/

&class.rite.? [v( d.dd )]=flag

// -- Rites: Wolf --------------------------------------------------------------

&rite.chain_rage [v( d.dd )]=1
&tags.rite.chain_rage [v( d.dt )]=werewolf.wolf

&rite.messenger [v( d.dd )]=1
&tags.rite.messenger [v( d.dt )]=werewolf.wolf

&rite.bottle_spirit [v( d.dd )]=2
&tags.rite.bottle_spirit [v( d.dt )]=werewolf.wolf

&rite.sacred_hunt [v( d.dd )]=2
&tags.rite.sacred_hunt [v( d.dt )]=werewolf.wolf

&rite.kindle_fury [v( d.dd )]=3
&tags.rite.kindle_fury [v( d.dt )]=werewolf.wolf

&rite.shadowbind [v( d.dd )]=3
&tags.rite.shadowbind [v( d.dt )]=werewolf.wolf

&rite.fetish [v( d.dd )]=4
&tags.rite.fetish [v( d.dt )]=werewolf.wolf

&rite.twilight_purge [v( d.dd )]=4
&tags.rite.twilight_purge [v( d.dt )]=werewolf.wolf

&rite.forge_alliance [v( d.dd )]=5
&tags.rite.forge_alliance [v( d.dt )]=werewolf.wolf

&rite.urfarah's_bane [v( d.dd )]=5
&tags.rite.urfarah's_bane [v( d.dt )]=werewolf.wolf

&rite.veil [v( d.dd )]=5
&tags.rite.veil [v( d.dt )]=werewolf.wolf

// -- Rites: Pack --------------------------------------------------------------

&rite.banish [v( d.dd )]=1
&tags.rite.banish [v( d.dt )]=werewolf.wolf-blooded.pack

&rite.harness_the_cycle [v( d.dd )]=1
&tags.rite.harness_the_cycle [v( d.dt )]=werewolf.wolf-blooded.pack

&rite.totemic_empowerment [v( d.dd )]=1
&tags.rite.totemic_empowerment [v( d.dt )]=werewolf.wolf-blooded.pack

&rite.hunting_ground [v( d.dd )]=2
&tags.rite.hunting_ground [v( d.dt )]=werewolf.wolf-blooded.pack

&rite.moon's_mad_love [v( d.dd )]=2
&tags.rite.moon's_mad_love [v( d.dt )]=werewolf.wolf-blooded.pack

&rite.wellspring [v( d.dd )]=1
&tags.rite.wellspring [v( d.dt )]=werewolf.wolf-blooded.pack

&rite.raiment_of_the_storm [v( d.dd )]=3
&tags.rite.raiment_of_the_storm [v( d.dt )]=werewolf.wolf-blooded.pack

&rite.shadowcall [v( d.dd )]=3
&tags.rite.shadowcall [v( d.dt )]=werewolf.wolf-blooded.pack

/* *** WARNING ***
If you also have Vampire, you may need this:

&rite.shadowcall [v( d.dd )]=3
&tags.rite.shadowcall [v( d.dt )]=werewolf.wolf-blooded.pack.vampire.circle of the crone

&prerequisite.rite.shadowcall [v( d.dd )]=
	if( u( .is_full, %0, bio.template, vampire ), 
		cand( 
			u( .is_full, %0, bio.covenant, circle of the crone ), 
			u( .at_least, %0, discipline.cruac, v( rite.touch_of_the_morrigan )
		)
	)

&prereq-text.rite.shadowcall [v( d.dd )]=
	If Vampire: 
	Circle of the Crone, 
	Cruac at this level or higher
*/

&rite.supplication [v( d.dd )]=3
&tags.rite.supplication [v( d.dt )]=werewolf.wolf-blooded.pack

&rite.hidden_path [v( d.dd )]=4
&tags.rite.hidden_path [v( d.dt )]=werewolf.wolf-blooded.pack

&rite.expel [v( d.dd )]=4
&tags.rite.expel [v( d.dt )]=werewolf.wolf-blooded.pack

&rite.great_hunt [v( d.dd )]=5
&tags.rite.great_hunt [v( d.dt )]=werewolf.wolf-blooded.pack


/* 
================================================================================
== WEREWOLF GIFTS ==============================================================
*/

// -- Gifts --------------------------------------------------------------------

&.gifts.facet_check.moon [v( d.dd )]=
	cand( 
// check auspice
		u( .is, %0, bio.auspice, %1 ), 

// check that 1 comes before 2; this is harder because it's a 'list' stat class
		case( 1, 
			strmatch( %3, ), 1, 
			cor( 
				u( .list_has_all, %0, %2, lnum( 1, %3, . )), 
				cand( 
					u( .has_not, %0, %2 ), 
					eq( %3, 1 )
				), 
				strmatch( %3, ![last( u( .value_full, %0, %2 ), . )])
			)
		)
	)


&.gifts.facet_check.wolf [v( d.dd )]=
		switch( %2, 
			@@( null ), 1, 
			Unlock, 1, 
			!Unlock, 1, 
			!*, u( .has, %0, renown.[rest( %2, ! )] ), 
			u( .has, %0, renown.%2 )
		)

&.gifts.facet_check.shadow [v( d.dd )]=
	cand( 
		cor( 
			u( .list_has, %0, %1, Unlock ), 
			strmatch( %2, Unlock )
		), 
		u( .gifts.facet_check.wolf, %0, %1, %2 )
	)

&class.gift.? [v( d.dd )]=list

// -- Moon Gifts ---------------------------------------------------------------

&gift.crescent_moon's_gift [v( d.dd )]=1.2.3.4.5|
	Shadow Gaze.Spirit Whispers.Shadow Hunter.Shadow Masquerade.Panopticon
&prerequisite.gift.crescent_moon's_gift [v( d.dd )]=
	u( .gifts.facet_check.moon, %0, Ithaeur, gift.crescent_moon's_gift, %2 )
&prereq-text.gift.crescent_moon's_gift [v( d.dd )]=
	Auspice is Ithaeur, must be set or unset in order
&tags.gift.crescent_moon's_gift [v( d.dt )]=werewolf.moon.ithaeur

&gift.full_moon's_gift [v( d.dd )]=1.2.3.4.5|
	Killer Instinct.Warrior's Hide.Bloody-Handed Hunter.Butchery.Crimson Spasm
&prerequisite.gift.full_moon's_gift [v( d.dd )]=
	u( .gifts.facet_check.moon, %0, Rahu, gift.full_moon's_gift, %2 )
&prereq-text.gift.full_moon's_gift [v( d.dd )]=
	Auspice is Rahu, must be set or unset in order
&tags.gift.full_moon's_gift [v( d.dt )]=werewolf.moon.rahu

&gift.gibbous_moon's_gift [v( d.dd )]=1.2.3.4.5|
	War Howl.Voice of Glory.Dream Hunter.Thousand-Throat Howl.End of Story
&prerequisite.gift.gibbous_moon's_gift [v( d.dd )]=
	u( .gifts.facet_check.moon, %0, Cahalith, gift.gibbous_moon's_gift, %2 )
&prereq-text.gift.gibbous_moon's_gift [v( d.dd )]=
	Auspice is Cahalith, must be set or unset in order
&tags.gift.gibbous_moon's_gift [v( d.dt )]=werewolf.moon.cahalith

&gift.half_moon's_gift [v( d.dd )]=1.2.3.4.5|
	Scent Beneath the Surface.Binding Oath.Sly Hunter.
	Ties of Word and Promise.Ties of Blood and Bone
&prerequisite.gift.half_moon's_gift [v( d.dd )]=
	u( .gifts.facet_check.moon, %0, Elodoth, gift.half_moon's_gift, %2 )
&prereq-text.gift.half_moon's_gift [v( d.dd )]=
	Auspice is Elodoth, must be set or unset in order
&tags.gift.half_moon's_gift [v( d.dt )]=werewolf.moon.elodoth

&gift.new_moon's_gift [v( d.dd )]=1.2.3.4.5|
	Eviscerate.Slip Away.Relentless Hunter.Divide and Conquer.Breach
&prerequisite.gift.new_moon's_gift [v( d.dd )]=
	u( .gifts.facet_check.moon, %0, Irraka, gift.new_moon's_gift, %2 )
&prereq-text.gift.new_moon's_gift [v( d.dd )]=
	Auspice is Irraka, must be set or unset in order
&tags.gift.new_moon's_gift [v( d.dt )]=werewolf.moon.irraka

// -- Shadow Gifts -------------------------------------------------------------

&gift.gift_of_death [v( d.dd )]=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Cold Embrace.Barghest.Memento Mori.Bone Gnaw.Eyes of the Dead
&prerequisite.gift.gift_of_death [v( d.dd )]=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_death, %2 )
&prereq-text.gift.gift_of_death [v( d.dd )]=
	Must have Renown of the Facet entered (%2) and must have 'Unlock'.
&tags.gift.gift_of_death [v( d.dt )]=werewolf.shadow.bone shadows

&gift.gift_of_dominance [v( d.dd )]=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Primal Allure.Glorious Lunacy.Lay Low the Challenger.
	Snarl of the Predator.Lead the Lesser Pack
&prerequisite.gift.gift_of_dominance [v( d.dd )]=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_dominance, %2 )
&prereq-text.gift.gift_of_dominance [v( d.dd )]=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_dominance [v( d.dt )]=werewolf.shadow.rahu.storm lords

&gift.gift_of_the_elementals [v( d.dd )]=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Breath of Air.Catastrophe.Flesh of Earth.Tongue of Flame.
	Heart of Water
&prerequisite.gift.gift_of_the_elementals [v( d.dd )]=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_the_elementals, %2 )
&prereq-text.gift.gift_of_the_elementals [v( d.dd )]=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_the_elementals [v( d.dt )]=
	werewolf.shadow.ithaeur.bone shadows

&gift.gift_of_evasion [v( d.dd )]=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Feet of Mist.Fog of War.Deny Everything.Hit and Run.Exit Strategy
&prerequisite.gift.gift_of_evasion [v( d.dd )]=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_evasion, %2 )
&prereq-text.gift.gift_of_evasion [v( d.dd )]=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_evasion [v( d.dt )]=werewolf.shadow.irraka.storm lords

&gift.gift_of_insight [v( d.dd )]=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Prey on Weakness.Read the World's Loom.Echo Dream.
	Scent the Unnatural.One Step Ahead
&prerequisite.gift.gift_of_insight [v( d.dd )]=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_insight, %2 )
&prereq-text.gift.gift_of_insight [v( d.dd )]=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_insight [v( d.dt )]=werewolf.shadow.elodoth.bone shadows

&gift.gift_of_inspiration [v( d.dd )]=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Lunatic Inspiration.Fearless Hunter.Pack Triumphs Together.Unity.
	Still Small Voice
&prerequisite.gift.gift_of_inspiration [v( d.dd )]=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_inspiration, %2 )
&prereq-text.gift.gift_of_inspiration [v( d.dd )]=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_inspiration [v( d.dt )]=werewolf.shadow.cahalith.blood talons

&gift.gift_of_knowledge [v( d.dd )]=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Needle.This Story is True.Know Thy Prey.Lore of the Land.
	Sift the Sands
&prerequisite.gift.gift_of_knowledge [v( d.dd )]=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_knowledge, %2 )
&prereq-text.gift.gift_of_knowledge [v( d.dd )]=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_knowledge [v( d.dt )]=werewolf.shadow.cahalith.iron masters

&gift.nature's_gift [v( d.dd )]=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Nature's Lure.Black Earth, Red Hunger.Knotted Paths.Pack Kin.
	Beast Ride
&prerequisite.gift.nature's_gift [v( d.dd )]=
	u( .gifts.facet_check.shadow, %0, gift.nature's_gift, %2 )
&prereq-text.gift.nature's_gift [v( d.dd )]=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.nature's_gift [v( d.dt )]=werewolf.shadow.hunters in darkness

&gift.gift_of_rage [v( d.dd )]=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Incite Fury.Berserker's Might.Perfected Rage.Slaughterer.
	Raging Lunacy
&prerequisite.gift.gift_of_rage [v( d.dd )]=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_rage, %2 )
&prereq-text.gift.gift_of_rage [v( d.dd )]=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_rage [v( d.dt )]=werewolf.shadow.blood talons

&gift.gift_of_shaping [v( d.dd )]=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Moldywarp.Shield-Breaker.Entropy's Toll.Perfection of Form.Sculpt
&prerequisite.gift.gift_of_shaping [v( d.dd )]=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_shaping, %2 )
&prereq-text.gift.gift_of_shaping [v( d.dd )]=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_shaping [v( d.dt )]=werewolf.shadow.ithaeur.iron masters

&gift.gift_of_stealth [v( d.dd )]=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Shadow Pelt.Predator's Shadow.Pack Stalks to Prey.The Hunter Waits.
	Running Silent
&prerequisite.gift.gift_of_stealth [v( d.dd )]=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_stealth, %2 )
&prereq-text.gift.gift_of_stealth [v( d.dd )]=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_stealth [v( d.dt )]=
	werewolf.shadow.irraka.hunters in darkness

&gift.gift_of_strength [v( d.dd )]=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Unchained.Predator's Unmatched Pursuit.Crushing Blow.
	Primal Strength.Rending Claws
&prerequisite.gift.gift_of_strength [v( d.dd )]=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_strength, %2 )
&prereq-text.gift.gift_of_strength [v( d.dd )]=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_strength [v( d.dt )]=werewolf.shadow.rahu.blood talons

&gift.gift_of_technology [v( d.dd )]=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Garble.Unmake.Command Artiface.Shutdown.Iron Slave
&prerequisite.gift.gift_of_technology [v( d.dd )]=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_technology, %2 )
&prereq-text.gift.gift_of_technology [v( d.dd )]=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_technology [v( d.dt )]=werewolf.shadow.iron masters

&gift.gift_of_warding [v( d.dd )]=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Maze Ward.Ward the Wolf's Den.All Doors Locked.
	Predator's Claim.Boundary Ward
&prerequisite.gift.gift_of_warding [v( d.dd )]=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_warding, %2 )
&prereq-text.gift.gift_of_warding [v( d.dd )]=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_warding [v( d.dt )]=
	werewolf.shadow.elodoth.hunters in darkness

&gift.gift_of_weather [v( d.dd )]=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Cloak of Mist and Haze.Heavens Unleashed.Hunt Under Iron Skies.
	Grasp of Howling Winds.Hunt of Fire and Ice
&prerequisite.gift.gift_of_weather [v( d.dd )]=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_weather, %2 )
&prereq-text.gift.gift_of_weather [v( d.dd )]=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_weather [v( d.dt )]=werewolf.shadow.storm lords

// -- Wolf Gifts ---------------------------------------------------------------

&gift.gift_of_change [v( d.dd )]=
	Cunning.Glory.Honor.Purity.Wisdom|
	Skin Thief.Gaze of the Moon.Luna's Embrace.The Father's Form.
	Quicksilver Flesh
&prerequisite.gift.gift_of_change [v( d.dd )]=
	u( .gifts.facet_check.wolf, %0, gift.gift_of_change, %2 )
&prereq-text.gift.gift_of_change [v( d.dd )]=
	Must have Renown of the Facet entered (%2).
&tags.gift.gift_of_change [v( d.dt )]=werewolf.wolf

&gift.gift_of_hunting [v( d.dd )]=
	Cunning.Glory.Honor.Purity.Wisdom|
	Honed Senses.Cow the Prey.Beast Talker.Tireless Hunter.Impossible Spoor
&prerequisite.gift.gift_of_hunting [v( d.dd )]=
	u( .gifts.facet_check.wolf, %0, gift.gift_of_hunting, %2 )
&prereq-text.gift.gift_of_hunting [v( d.dd )]=
	Must have Renown of the Facet entered (%2).
&tags.gift.gift_of_hunting [v( d.dt )]=werewolf.wolf

&gift.gift_of_pack [v( d.dd )]=
	Cunning.Glory.Honor.Purity.Wisdom|
	Reflected Facets.Down the Prey.Totem's Wrath.Maw of Madness.Pack Awareness
&prerequisite.gift.gift_of_pack [v( d.dd )]=
	u( .gifts.facet_check.wolf, %0, gift.gift_of_pack, %2 )
&prereq-text.gift.gift_of_pack [v( d.dd )]=
	Must have Renown of the Facet entered (%2).
&tags.gift.gift_of_pack [v( d.dt )]=werewolf.wolf




/* 
################################################################################
## WEREWOLF CHARGEN ############################################################

This is mixed up. I haven't checked to see if some elements are overwriting 
others, or if everything is here. It was originally split up in two sections.


================================================================================
== CHARGEN: ALLOCATIONS ========================================================

--------------------------------------------------------------------------------
-- Allocated Merits: Primal Urge -----------------------------------------------
*/

&f.allocated.power-trait.werewolf [v( d.cg )]=
	mul( 
		dec( u( v( d.dd )/.value, %0, advantage.primal_urge )), 
		5 
	)


/*
--------------------------------------------------------------------------------
-- Allocated Gifts -------------------------------------------------------------

moon gift`shadow gift (auspice)`shadow gift (tribe)`other gifts (probably wolf)

*/

&f.allocated.gifts [v( d.cg )]=
	localize( strcat( 
		edit( setr( m, u( f.allocated.gifts.moon, %0 )), GIFT., ), `, 
		edit( setr( a, u( f.allocated.gifts.shadow.auspice, %0 )), GIFT., ), `, 
		edit( setr( t, 
			setdiff( 
				u( f.allocated.gifts.shadow.tribe, %0 ), 
				%q1 
			)
		), GIFT., ), `, 
		edit( setr( w, u( f.allocated.gifts.wolf, %0 )), GIFT., ), `, 
		edit( 
			setdiff( 
				edit( lattr( %0/_gift.* ), _GIFT., GIFT. ), 
				%qm %qa %qt %qw 
			), 
			GIFT., 
		), 
	))

// --

&f.allocated.gifts.moon [v( d.cg )]=
	localize( strcat( 
		setq( g, lattr( v( d.dd )/gift.* )), 
		setq( m, 
			filter( 
				v( d.sfp )/fil.list-stats-tags, %qg, , , 
				moon.[get( %0/_bio.auspice )], and 
			)
		), 
		setq( c, 
			u( f.list-stats-tags, 
				%0, gift, moon.[get( %0/_bio.auspice )], and 
			)
		), 
		setinter( %qm, %qc )
	))

// --

&f.allocated.gifts.shadow.auspice [v( d.cg )]=
	localize( strcat( 
		setq( g, lattr( v( d.dd )/gift.* )), 
		setq( m, 
			filter( 
				v( d.sfp )/fil.list-stats-tags, %qg, , , 
				shadow.[get( %0/_bio.auspice )], 1 
			)
		), 
		setq( c, 
			u( f.list-stats-tags, 
				%0, gift, shadow.[get( %0/_bio.auspice )], and 
			)
		), 
		setinter( %qm, %qc )
	))

// --

&f.allocated.gifts.shadow.tribe [v( d.cg )]=
	localize( strcat( 
		setq( g, lattr( v( d.dd )/gift.* )), 
		setq( m, 
			filter( 
				v( d.sfp )/fil.list-stats-tags, %qg, , , 
				shadow.[get( %0/_bio.tribe )], 1 
			)
		), 
		setq( c, 
			u( f.list-stats-tags, 
				%0, gift, shadow.[get( %0/_bio.tribe )], and 
			)
		), 
// take out auspice gifts that have already been accounted for 
		setq( a, u( f.allocated.gifts.shadow.auspice, %0 )), 
		setdiff( setinter( %qm, %qc ), %qa )
	))

// --

&f.allocated.gifts.wolf [v( d.cg )]=ulocal( f.list-stats-tags, %0, gift, wolf )


/*
--------------------------------------------------------------------------------
-- Allocated Rites -------------------------------------------------------------

Total points in rites (should be 2)

*/

&f.allocated.rites [v( d.cg )]=
	ladd( 
		iter( lattr( %0/_rite.* ), 
			get( %0/%i0 )
		)
	)

/*
================================================================================
== CHARGEN: BIO ================================================================

--------------------------------------------------------------------------------
-- Bio Check: Wolf-Blooded -----------------------------------------------------

('pack' doesn't need to be set)
*/

&check.bio.wolf-blooded [v( d.cg )]=

/*
--------------------------------------------------------------------------------
-- Bio Check: Werewolf ---------------------------------------------------------
*/

&check.bio.werewolf [v( d.cg )]=blood bone auspice tribe


/*
================================================================================
== CHARGEN CHECK: WEREWOLF =====================================================

--------------------------------------------------------------------------------
-- Favored Skill ---------------------------------------------------------------

Should be easier than 'favored attribute':
	11/7/4
	find the one that's one higher
	scan that for auspice skills
	make sure at least one has 1 dot in it


	a: list of auspice skills, grabbed from the Data Dictionary
	s: allocated skills
	k: I have no idea
	x: break down skills by mental, physical, social
	f: make sure there is only one 11, one 7, and one 4 (after skill adjustment)
*/

&check.chargen.skills.werewolf [v( d.cg )]=
  localize( strcat( 
  		setq( a, 
  			edit( 
	  			get( v( d.dd )/d.auspice.skills.[get( %0/_bio.auspice )] ), 
	  			skill., 
	  		)
  		), 
		setq( s, ulocal( f.allocated.skills, %0 )), 
		setq( k, edit( lattr( %0/_skill.* ), _SKILL., SKILL. )), 
		setq( x, 
			iter( mental physical social, 
				setinter( 
					lcstr( edit( 
						filter( u( d.sfp )/f.hastag?.workhorse, 
							%qk, , , %i0, 0 
						), SKILL., 
					)), 
					%qa 
				), 
				, | 
			)
		), 
		setq( f, 
			first( iter( %qs, 
				if( 
					lor( iter( 11 7 4, eq( %i0, dec( %i1 )))), 
					elements( %qx, inum( 0 ), | )
				), 
				/ 
			))
		), 

		ulocal( f.allocated.skills, %0 ), %b, %(of 11/7/4 + auspice skill%), %b, 
		ulocal( display.check.stats, %0, skills, skill.%qf:-1 ), 
		if( eq( words( %qf ), 0 ), 
			ansi( n, %b%[, r, but no auspice skill found, n, %] )
		), 
		%r, 

		%b %b%b, ansi( h, Auspice Skill ), :, %b, 
		titlestr( edit( itemize( %qf, , or ), _, %b )), %b, 
		%[, 
		case( 1, 
			eq( words( %qf ), 0 ), ansi( r, none found ), 
			ansi( g, OK )
		), 
		%] 
	))

/* -- test --

think u( v( d.cg )/check.chargen.skills.werewolf, pmatch( thenomain ))
*/

/*
--------------------------------------------------------------------------------
-- Chargen Check: Werewolf -----------------------------------------------------


*/

&check.chargen.werewolf [v( d.cg )]=
	strcat( 
		u( check.renown, %0 ), 
		u( check.gifts, %0 ), 
		u( check.rites, %0 ), 
		
	)


/*
--------------------------------------------------------------------------------
-- Chargen Check: Renown -------------------------------------------------------

Check that each renown's tags == (auspice + tribe) + 1

This stuff should be in some 'f.allocated.renown' or whatnot, but this 
will do.

--

WtF2E p83

By this stage, you should already have two dots of Renown; one for your
character’s auspice, and one for her tribe. Choose another dot in a Renown of
your choice, but note that you cannot take a third dot in a single Renown at
this point. Ghost Wolves receive this dot of Renown, for a total of two.

--

r: renown available (dd)
a: renown for auspice & tribe
c: character's current renown
g: is character tribe Ghost Wolves (aka tribeless)?
t: total renown so far

x: temp sheet renown
y: temp number of renown allowed

*/

&check.renown [v( d.cg )]=
    strcat( 
        setq( r, lattr( v( d.dd )/renown.* )), 
        setq( a, 
            edit( 
                filter( 
                    v( d.sfp )/fil.list-stats-tags, %qr, , , 
                    [get( %0/_bio.auspice )].[get( %0/_bio.tribe )] 
                ), 
                RENOWN., 
            )
        ), 
        setq( c, edit( lattr( %0/_renown.* ), _RENOWN., )), 
        setq( g, strmatch( get( %0/_bio.tribe ), Ghost Wolves )), 
        setq( t, 0 ), 

        divider( Chargen Levels: Renown ), %r, 
        iter( setunion( %qc, %qa ), 
            strcat( 
                %b%b, 
                ansi( h, titlestr( %i0 )), :, %b, 
                setr( x, default( %0/_renown.%i0, 0 )), 
                setq( t, add( %qt, %qx )), 
                if( 
                    cand( 
                        t( match( %qa, %i0 )), 
                        lt( %qx, 1 )
                    ), 
                    ansi( n, %b%[, r, must exist, n, %] )
                ), 
            ), , %r 
        ), %r, 

// Ghost Wolves don't get a renown dot for Tribe.
        %b%b, ansi( h, Points Spent ), : %qt/[sub( 3, %qg )], 
        %b, u( display.check.ok-no, eq( %qt, sub( 3, %qg ))), 
        %r, 
    )

/*
--------------------------------------------------------------------------------
-- Chargen Check: Gifts --------------------------------------------------------

p.84: 

Start with one Facet of your auspice’s Moon Gift. 
Choose one Facet each of two Shadow Gifts from tribe and auspice. 
Choose one facet of a Wolf Gift, or the second Facet of your Moon Gift if you 
have two dots in your auspice Renown. 
You cannot choose a Facet in which your character has no dots of Renown.

Moon Gift (1 gift, 1-2 facets)
- Pretty easy to determine
- 1 facet (lvl 1) or 2 if Auspice Renown >= 2

Shadow Gifts (1-2 gifts, 1 facet each)
- Must be 2 different gifts
- 1 from Auspice Shadow list
- 1 from Tribe Shadow list (unless Ghost Wolf, who don't get one)

Wolf Gifts (0-1 gifts, 1 facet each)
- 0 if Auspice Renown >=2, otherwise 1 facet

Total: 3-4

0: sheet dbref

g: allocated gifts: moon`shadow (auspice)`shadow (tribal)`wolf`other/unaccounted
a: auspice
r: auspice renown
v: auspice renown's value
t: tribe

*/

&check.gifts [v( d.cg )]=
	strcat( 
		setq( g, u( f.allocated.gifts, %0 )), 

		divider( Chargen Levels: Gifts ), %r, 

		u( check.gifts.moon, %0, %qg ), 
//		u( check.gifts.auspice, %0, %qg ), 
//		u( check.gifts.tribe, %0, %qg ), 
		u( check.gifts.shadow, %0, %qg ), 
		u( check.gifts.wolf, %0, %qg ), 
		u( check.gifts.other, %0, %qg ), 
	)

/* -- test --

think u( v( d.cg )/check.gifts, %# )
*/

// -- check gifts: moon -- 
// 0: target sheet -- 1: %qg

&check.gifts.moon [v( d.cg )]=
	strcat( 
		setq( a, u( v( d.dd )/.value_full, %0, bio.auspice )), 
		setq( r, 
			filter( v( d.sfp )/fil.list-stats-tags, 
				lattr( v( d.dd )/renown.* ), , , %qa 
			)
		), 
		setq( v, u( v( d.dd )/.value, %0, %qr )), 
		setq( x, elements( %1, 1, ` )), 
		setq( k, eq( words( %qx ), 1 )), 

		%b%b, 
		ansi( h, Moon Gift ), :, %b, 
		titlestr( edit( itemize( %qx ), _, %b )), %b, 
		u( display.check.ok-no, %qk ), 
		if( %qk, 
			strcat( 
				setq( f, 
					setdiff( 
						u( v( d.dd )/.value_full, %0, gift.%qx ), 
						Unlock, 
						. 
					)
				), 
				%r, %b %b%b, %(, 
				ansi( h, Facets ), :, %b, 
				setr( x, words( %qf, . )), %b, out of %qv, %), 
				%b, u( display.check.ok-no, eq( %qx, %qv )), 
			)
		), %r 
	)


&check.gifts.shadow [v( d.cg )]=
	strcat( 
		setq( x, extract( %1, 2, 2, `, )), 
		setq( k, gte( words( %qx ), 1 )), 

		%b%b, 
		ansi( h, Shadow Gift%, Auspice or Tribe ), :, %b, 
		titlestr( edit( itemize( %qx ), _, %b )), %b, 
		%(of two%), %b, 
		u( display.check.ok-no, %qk ), 
		if( %qk, 
			strcat( 
				setq( f, 
					iter( %qx, 
						setdiff( 
							u( v( d.dd )/.value_full, %0, gift.%i0 ), 
							Unlock, 
							. 
						), 
						, . 
					)
				), 
				%r, %b %b%b, %(, 
				ansi( h, Facets ), :, %b, 
				setr( x, words( %qf, . )), %b, out of 2, 
				%), 
				%b, u( display.check.ok-no, eq( %qx, 2 ))
			)
		), 
		%r 
	)


/*
***************** Merging 'auspice' and 'tribe' into 'shadow' *****************
                      (leaving old code in, just in case)

// -- check gifts: auspice -- 
// 0: target sheet -- 1: %qg

&check.gifts.auspice [v( d.cg )]=
	strcat( 
		setq( a, u( v( d.dd )/.value_full, %0, bio.auspice )), 
		setq( x, elements( %1, 2, ` )), 
		setq( k, eq( words( %qx ), 1 )), 

		%b%b, 
		ansi( h, Shadow Gift%, Auspice ), :, %b, 
		titlestr( edit( itemize( %qx ), _, %b )), %b, 
		%(of one%), %b, 
		u( display.check.ok-no, %qk ), 
		if( %qk, 
			strcat( 
				setq( f, 
					setdiff( 
						u( v( d.dd )/.value_full, %0, gift.%qx ), 
						Unlock, 
						. 
					)
				), 
				%r, %b %b%b, %(, 
				ansi( h, Facets ), :, %b, 
				setr( x, words( %qf, . )), %b, out of 1, 
				%), 
				%b, u( display.check.ok-no, eq( %qx, 1 ))
			)
		), 
		%r 
	)

// -- check gifts: tribe -- 
// 0: target sheet -- 1: %qg

&check.gifts.tribe [v( d.cg )]=
	strcat( 
		setq( x, setdiff( elements( %1, 3, ` ), elements( %1, 2, ` ))), 
		%b%b, 
		ansi( h, Shadow Gift%, Tribe ), :, %b, 
		titlestr( edit( %qx, %b, %,%b , _, %b )), 
		%b, 
		setq( k, 
			eq( 
				words( %qx ), 
				mul( 1, 
					setr( w, u( v( d.dd )/.is_not, %0, tribe, Ghost Wolves ))
				)
			)
		), 
		%(of, %b, if( strmatch( %qt, Ghost Wolves ), none, one ), %)%b, 
		u( display.check.ok-no, %qk ), 
		if( cand( %qk, %qw ), 
			strcat( 
				%r, %b %b%b, %(, 
				ansi( h, Facets ), :, %b, 
				setr( x, words( %qf, . )), %b, out of 1, 
				%), 
				%b, u( display.check.ok-no, eq( %qx, 1 ))
			)
		), 
		%r 
	)

*** end merge ***
*/

// -- check gifts: wolf -- 
// 0: target sheet -- 1: %qg

&check.gifts.wolf [v( d.cg )]=
	strcat( 
		%b%b, 
		ansi( h, Wolf Gifts ), :, %b, 
		titlestr( edit( itemize( setr( x, elements( %1, 4, ` ))), _, %b )), %b, 
		setq( k, 
			eq( 
				words( %qx ), mul( 1, eq( %qv, 1 ))
			)
		), 
		u( display.check.ok-no, %qk ), 
		if( %qk, 
			strcat( 
				%r%b %b %(, 
				ansi( h, Facets ), :, %b, 
				setr( x, 
					words( u( v( d.dd )/.value_full, %0, gift.%qx ), . )
				), %), 
				%b, u( display.check.ok-no, eq( %qx, mul( 1, eq( %qv, 1 )))), 
			)
		), 
	)

// -- check gifts: other -- 
// 0: target sheet -- 1: %qg

&check.gifts.other [v( d.cg )]=
	strcat( 
		setq( x, elements( %1, 5, ` )), 
		setq( k, eq( words( %qx ), 0 )), 
		if( not( %qk ), 
			strcat( 
				%r%b%b, 
				ansi( h, Other Gifts ), :, %b, 
				titlestr( edit( itemize( %qx ), _, %b )), %b, 
				u( display.check.ok-no, %qk ), 
			)
		), %r, 
	)




/*
--------------------------------------------------------------------------------
-- Chargen Check: Rites --------------------------------------------------------

2 dots of rites 

*/

&check.rites [v( d.cg )]=
	strcat( 
		setq( g, u( f.allocated.rites, %0 )), 
		%b%b, 
		ansi( h, Rites ), :, %b, 
		%qg out of 2, %b, 
		u( display.check.ok-no, eq( %qg, 2 )), 
		%r 
	)



/*
================================================================================
== CHARGEN CHECK: WOLF-BLOODED =================================================

one free merit.tell_()

*/

&f.allocated.merits.wolf-blooded [v( d.cg )]=
	get( %0/[first( lattr( %0/_merit.tell_(*) ))] )


&check.chargen.wolf-blooded [v( d.cg )]=
	strcat( 
		%b, %b, ansi( h, Free Tell ), :, %b, 
		u( display.check.ok-no, 
			eq( u( f.allocated.merits.wolf-blooded, %0 ), 3 )
		), 
		%r 
	)



/*
################################################################################
## WEREWOLF: XP COSTS ##########################################################

Trait Experience
Rites 1
Affinity Gift 3
Non-Affinity Gift 5 
Wolf Gift Facet 1
Additional Facet 2
Renown 3
Primal Urge 5
*/

// &xp.advantage.<power> [v( d.xpcd )]=u( cost.standard, 5, %1, %2 )


&d.restricted.types.werewolf [v( d.xpas )]=gift
&d.restricted.stats.werewolf [v( d.xpas )]=

&xp.renown [v( d.xpcd )]=u( cost.standard, 3, %1, %2 )
&xp.advantage.primal_urge [v( d.xpcd )]=u( cost.standard, 5, %1, %2 )
&xp.rite [v( d.xpcd )]=u( cost.standard, 1, %1, %2 )

/*
Following is sent from XP: 
	%0: dbref of sheet
	%1: from
	%2: to
	%3: statpath, sans instance
	%4: value.list.of.statpath
*/

&xp.gift [v( d.xpcd )]=
	case( 1, 
		cand( 
			strmatch( %2, unlock ), 
			u( v( d.sfp )/f.hastag?.workhorse, 
				%3, 
				[u( .value_full, %0, bio.tribe )].
				[u( .value_full, %0, bio.auspice )], 
				0 
			)
		), 3, 
		strmatch( %2, unlock ), 5, 
		ulocal( v( d.sfp )/f.hastag?.workhorse, %3, wolf ), 1, 
		2 
	)



/*
################################################################################
## WEREWOLF: SHEET #############################################################
*/

// -- Bio ----------------------------------------------------------------------

&bio.default.wolf-blooded [v( d.nsc )]=
	birthdate concept pack template virtue vice 

&bio.default.werewolf [v( d.nsc )]=
	birthdate concept pack [if( hasattr( %0, _bio.lodge ), lodge )]  
	template blood bone auspice tribe

// -- Powers: Gifts ------------------------------------------------------------
// 0: sheet dbref
// 1: moon, shadow, or wolf (type of gift)
// outputs: <name>:<value>.<desc>:<value>.<desc>|...

&powers.gifts [v( d.nsc )]=
	iter( 
		filter( v( d.sfp )/f.hastag?.workhorse, 
			sort( edit( lattr( %0/_gift.* ), _GIFT., gift. )), 
			, , %1, 1 
		), 
		ulocal( f.cheat_getstat.with_name, %0, %i0, list ), 
		, | 
	)

// -- Powers: Renown -----------------------------------------------------------
// outputs: <renown>:<value>|...|Effective Rank:<value>

&powers.renown [v( d.nsc )]=
	iter( 
		renown.purity renown.glory renown.honor 
		renown.wisdom renown.cunning advantage.effective_rank, 
		ulocal( f.cheat_getstat.with_name, %0, %i0, numeric ), 
		, | 
	)

// -- Powers: Rites ------------------------------------------------------------
// May collide with 'powers.disciplines.rites', but so be it

&powers.rites.werewolf [v( d.nsc )]=
	iter( sort( edit( lattr( %0/_rite.* ), _RITE., )), 
		ulocal( f.cheat_getstat.with_name, %0, rite.%i0, numeric ), 
		, | 
	)


// -- 

&block.powers.werewolf [v( d.sheet )]=
  strcat( 

// .. renown
		setq( w, 26 ), setq( t, 16 ), 
		setq( x, ulocal( powers.renown, %0 )), 
		setq( y, 
			iter( elements( %qx, 1 2, | ), 
				u( display.trait-and-value, %i0, %qt, %qw, numeric ), 
				|, | 
			)
		), 
		setq( z, 
			iter( elements( %qx, 3 4, | ), 
				u( display.trait-and-value, %i0, %qt, %qw, numeric ), 
				|, | 
			)
		), 
		setq( a, 
			iter( elements( %qx, 5 6, | ), 
				u( display.trait-and-value, %i0, %qt, %qw, numeric ), 
				|, | 
			)
		), 

		divider( Renown ), %r, 
		vcolumns( 
			%qw:%qy, 
			%qw:%qz, 
			%qw:%qa, 
			|, 
			%b 
		), %r, 

// .. gifts
		setq( w, 79 ), setq( t, 70 ), 
		divider( Gifts ), %r, 

		iter( moon shadow wolf, 
			strcat( 
				setq( d, u( powers.gifts, %0, %i0 )), 
				iter( %qd, 
					ulocal( display.gift, %i0, %qw, . ), 
					|, %r 
				), 
			), , %r 
		), %r, 

// .. rites, if any 
		setq( x, u( powers.rites.werewolf, %0 )), 
		if( strlen( %qx ), 
			strcat( 
				setq( w, 38 ), setq( t, 38 ), 

				setq( y, 
					iter( %qx, 
						u( display.trait-name-only, %i0, %qt, %qw, flag ), 
						|, | 
					)
				), 
				setq( a, words( %qx, | )), 
				setq( b, ceil( fdiv( %qa, 2 ))), 
				setq( c, lnum( 1, %qb )), 
				setq( d, lnum( inc( %qb ), inc( %qa ))), 

				divider( Rites ), %r, 

				vcolumns( 
					%qw:[elements( %qy, %qc, |, | )], 
					%qw:[elements( %qy, %qd, |, | )], 
					|, 
					%b 
				), %r 
			)
		)
	)

// --

/*
	n: name
	r: rest of the gifts
	u: 'unlock' value, if set
	s: does stat take 'unlock'?
	t: text for first line (priming read stuff)
	l: length of padding between 'name' and 'value'
*/

&display.gift [v( d.sheet )]=
	strcat( 
		setq( n, first( %0, : )), 
		setq( r, rest( %0, : )), 
		setq( u, grab( %qr, Unlock.*, : )),
		setq( s, 
			match( 
				first( get( v( d.dd )/gift.[edit( %qn, %b, _ )] ), | ), 
				Unlock, . 
			)
		), 

		if( cand( strmatch( %qr, Unlock.* ), eq( words( %qr, : ), 1 )), 
			setq( r, .[rest( %qu, . )]), 
			setq( r, remove( %qr, %qu, : ))
		), 

		if( cand( %qs, not( %qu )), 
			setq( n, ansi( n, %qn%b, xh, %(not unlocked%) ))
		), 

		setq( t, 
			strcat( 
				rest( first( %qr, : ), . ), 
				if( t( setr( z, first( first( %qr, : ), . ))), 
					strcat( 
						%b, %(, first( first( %qr, : ), . ), %)
					)
				)
			)
		), 

		setq( l, 
			sub( %1, add( strlen( %qn ), strlen( %qt ), 4 ))
		), 

		%qn, %b, ansi( xh, repeat( %2, %ql )), %b, %qt, 
		iter( rest( %qr, : ), 
			%r
			[rjust( 
				strcat( rest( %i0, . ), %b, %(, first( %i0, . ), %) ), 
				sub( %1, 2 )
			)], 
			:, @@ 
		)
	)

// --

&block.powers.wolf-blooded [v( d.sheet )]=
	strcat( 

// .. rites, if any 
		setq( x, u( powers.rites.werewolf, %0 )), 
		if( strlen( %qx ), 
			strcat( 
				setq( w, 38 ), setq( t, 38 ), 

				setq( y, 
					iter( %qx, 
						u( display.trait-name-only, %i0, %qt, %qw, flag ), 
						|, | 
					)
				), 
				setq( a, words( %qx, | )), 
				setq( b, ceil( fdiv( %qa, 2 ))), 
				setq( c, lnum( 1, %qb )), 
				setq( d, lnum( inc( %qb ), inc( %qa ))),

				divider( Rites ), %r, 

				vcolumns( 
					%qw:[elements( %qy, %qc, |, | )], 
					%qw:[elements( %qy, %qd, |, | )], 
					|, 
					%b 
				), %r 
			)
		)
	)


// -- Advantages ---------------------------------------------------------------

&traits.morality.werewolf [v( d.nsc )]=
	ulocal( f.cheat_getstat.morality, %0, integrity, Harmony )

&traits.essence [v( d.nsc )]=
	u( f.cheat_getstat.pool, %0, essence )

&block.traits.essence [v( d.sheet )]=
	strcat( 
		setq( w, 38 ), 
		setq( t, 10 ), 

// .. essence
		setq( x, ulocal( traits.essence, %0 )), 
		setq( c, rest( setr( y, first( %qx, | )), : )), 
		setq( p, last( %qx, : )), 

// .. return
		u( display.trait-and-value, %qy, %qt, %qw, pool, %b, %qp )
	)


&block.traits.werewolf [v( d.sheet )]=
	strcat( 
		setq( w, 38 ), 
		setq( t, 10 ), 

// .. essence (power pool)
		setq( r, ulocal( block.traits.essence, %0 )), 

// .. primal urge (supernatural resistance)
		setq( z, 
			u( display.trait-and-value, 
				u( traits.supernatural_resistance, %0 ), 
				inc( strlen( Primal Urge )), %qw, numeric 
			)
		), 

// .. display
		vcolumns( 
			%qw:%qr, 
			%qw:%qz, 
			|, %b 
		), %r, 
	)





/*
################################################################################
## SPEND/REGAIN ESSENCE ########################################################

expands: 9c - Spend and Regain

	spend essence=<amt/method> for <reason>

spend limit per Primal Urge: 
	1 2 3 4 5 6 7 8 10 15

regain methods:
	moon (once/night)
	locus
	rite of the spirit hunt
	cannibalism


--------------------------------------------------------------------------------
-- Spend/Regain Methods --------------------------------------------------------
*/

&regain.methods.essence [v( d.psrs )]=|all
&spend.methods.essence [v( d.psrs )]=[@@( nothing but numeric allowed here )]


/* 
--------------------------------------------------------------------------------
-- Spend/Regain Essence Amts ---------------------------------------------------
*/

&amt.spend.numeric.essence [v( d.psrs )]=
	if( t( u( amt.spend.numeric.default, %0, %1, %2 )), 
		if( 
			lte( %2, 
				elements( 
					1 2 3 4 5 6 7 8 10 15, 
					getstat( %0/Primal Urge )
				)
			), 
			mul( %2, -1 ), 
			#-1 You can't spend that much at one time 
		), 
		u( amt.spend.numeric.default, %0, %1, %2 )
	)


/* 
--------------------------------------------------------------------------------
-- Spend Essence Trigger -------------------------------------------------------
*/

&spend.trigger.essence [v( d.psrs )]=
	think strcat( 
		m:, %b, setr( m, u( f.match_method, %1, spend, essence, %2 )), %r, 
		a:, %b, setr( a, u( amt.spend, %1, essence, %qm )), %r, 
		u:, %b, setr( u, hasattr( %1, _advantage.Primal_Urge )), %r, 
		s:, %b, setr( s, hasattr( %1, _advantage.Essence_Maximum )), %r, 
	); 

	@assert cand( %qu, %qs )={ 
		@pemit %0=u( .msg, essence/spend, 
			cat( 
				if( strmatch( %0, %1 ), You, name( %1 )), 
				must have both Primal Urge and an Essence pool 
			)
		) 
	}; 

	@assert strlen( %qm )={ 
		@pemit %0=u( .msg, essence/spend, I could not find the method '%2' ) 
	}; 

	@assert t( %qa )={ 
		@pemit %0=u( .msg, essence/spend, rest( %qa )) 
	}; 

	@assert t( setr( e, u( f.pool.canchange, %1, Essence, %qa )))={ 
		@pemit %0=u( .msg, essence/spend, rest( %qe )) 
	}; 

	@assert t( setr( e, u( f.pool.changestat, %1, essence, %qa )))={ 
		@pemit %0=u( .msg, essence/spend, rest( %qe )) 
	}; 

	think e: 
		[setr( e, 
			u( display.number, %0, %1, essence, spend, %qa, %qm, %4 )
		)]; 
	@eval u( f.announcement, %0, %1, spend, %qe ); 


/* 
--------------------------------------------------------------------------------
-- Regain Essence Trigger ------------------------------------------------------
*/

&regain.trigger.essence [v( d.psrs )]=
	think strcat( 
		m:, %b, setr( m, u( f.match_method, %1, regain, essence, %2 )), %r, 
		a:, %b, setr( a, u( amt.regain, %1, essence, %qm )), %r, 
		u:, %b, setr( u, hasattr( %1, _advantage.Primal_Urge )), %r, 
		s:, %b, setr( s, hasattr( %1, _advantage.Essence_Maximum )), %r, 
	); 

	@assert cand( %qu, %qs )={ 
		@pemit %0=u( .msg, essence/regain, 
			cat( 
				if( strmatch( %0, %1 ), You, name( %1 )), 
				must have both Primal Urge and an Essence pool 
			)
		) 
	}; 

	@assert strlen( %qm )={ 
		@pemit %0=u( .msg, essence/regain, I could not find the method '%2' ) 
	}; 

	@assert t( %qa )={ 
		@pemit %0=u( .msg, essence/regain, rest( %qa )) 
	}; 

	@assert t( setr( e, u( f.pool.canchange, %1, Essence, %qa )))={ 
		@pemit %0=u( .msg, essence/regain, rest( %qe )) 
	}; 

	@assert t( setr( e, u( f.pool.changestat, %1, essence, %qa )))={ 
		@pemit %0=u( .msg, essence/regain, rest( %qe )) 
	}; 

	think e: 
		[setr( e, 
			u( display.number, %0, %1, essence, regain, %qa, %qm, %4 )
		)]; 
	@eval u( f.announcement, %0, %1, regain, %qe ); 



/*
--------------------------------------------------------------------------------
-- Raw Help File for Spend/Regain ----------------------------------------------

ESSENCE (SPEND)
    <num>: Only a numeric value is allowed here.

ESSENCE (REGAIN)
    <num>, <roll>, or 'all': No additional systems, tho there could be.


--------------------------------------------------------------------------------
-- Softcode Help File for Spend/Regain -----------------------------------------
*/

@edit #xxx/help~ic_systems~spend_and_regain=$,{ 
 %r %r
[ansi( h, ESSENCE \(SPEND\) )]%r
%b %b <num>: Only a numeric value is allowed here. %r
 %r
[ansi( h, ESSENCE \(REGAIN\) )]%r
%b %b <num>, <roll>, or 'all': No additional systems, tho there could be.
}







/*
################################################################################
## WEREWOLF: ONGOING NOTES #####################################################

Willpower is equal to Resolve + Composure. Harmony is 7. Size is 5. Health is 
Size + Stamina. Speed is Size + Strength + Dexterity. Defense is the lower of 
Dexterity and Wits, plus Athletics. Primal Urge is 1, plus any bought with 
Merits.

Primal Urge starts at 1 dot. Additional dots may be purchased with five Merit 
dots each. A character cannot start with Primal Urge higher than 3.

Start with one Facet of your auspice’s Moon Gift. Choose one Facet each of two 
Shadow Gifts from tribe or auspice. Choose one facet of a Wolf Gift, or the 
second Facet of your Moon Gift if you have two dots in your auspice Renown. You 
cannot choose a Facet in which your character has no dots of Renown.

--

Cahalith: 
	Crafts, Expression, and Persuasion
	Glory
	Gibbous Moon, Inspiration, Knowledge
Elodoth: 
	Empathy, Investigation, and Politics
	Honor
	Half Moon, Insight, Warding
Irraka: 
	Larceny, Stealth, and Subterfuge
	Cunning
	New Moon, Evasion, Stealth
Ithaeur: 
	Animal Ken, Medicine, and Occult
	Wisdom
	Crescent Moon, Elemental, Shaping
Rahu: 
	Brawl, Intimidation, and Survival
	Purity
	Full Moon, Dominance, Strength

each tribe has an associated Renown; mark a dot in that Renown

Blood Talons: 
	Glory
	Inspiration, Rage, Strength
Bone Shadows: 
	Wisdom
	Death, Elemental, and Insight
Hunters in Darkness: 
	Purity
	Nature, Stealth, and Warding
Iron Masters: 
	Cunning
	Knowledge, Shaping, and Technology
Storm Lords: 
	Honor
	Evasion, Dominance, and Weather

--

Anchors: 
Anchors keep Uratha grounded. They’re concepts, philosophies, people, places, 
and things that help her find herself when lost. Werewolf: The Forsaken 
characters have three Anchors: Blood, Bone, and Touchstones

Blood: thingy
Bone: thingy
Touchstone: thingy

--

AUSPICE
From a character creation standpoint, auspice offers you a free dot of one of 
three Skills, and one of your starting Renown dots. You can choose any of the 
three auspice Skills, but this free dot cannot take the Skill beyond five dots. 
Mark the Renown dot in the relevant Renown category.

TRIBE
Each tribe has an associated Renown. Mark a dot in that Renown.

GIFTS AND RITES
Start with one Facet of your auspice’s Moon Gift. Choose one Facet each of two 
Shadow Gifts from tribe or auspice. Choose one facet of a Wolf Gift, or the 
second Facet of your Moon Gift if you have two dots in your auspice Renown. You 
cannot choose a Facet in which your character has no dots of Renown.

	Aspirations 3 + 1 Totem
	Attributes 5/4/3
	Skills 11/7/4 (+3 Specialties)
	Auspice, Tribe
	Primal Urge 1
	Renown 1 auspice, 1 tribe, 1 free
	1 Moon Gift, 2 Shadow Gifts, 1 Moon/Wolf Gift
	Merits 10

--

Wolf-Blooded: p. 296

--

Primal Urge chart: p.93
Shapeshifting chart: p.96
Renown (& effective rank): p.98-9
Harmony: p.104
Merits: pp.105-110
Gifts: p.114

*/






/*
** TO DO! **
================================================================================
== TOTEM ASPIRATION ============================================================

p. 92

*/

