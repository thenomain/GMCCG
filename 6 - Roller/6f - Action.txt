/* 

================================================================================
== ACTION: The "roll macro" system. ============================================

The player sets the action on themselves. e.g.:

	&action.perception me=/again=9 wits + composure

The system runs it through objeval(%#, u(action.<name>)). This is done so the 
player can add code to their own actions and keep it secure.

I'd like the system to be able to strip the final target, "=job 5" for 
instance, but /switches use = as well so we'd need to be careful.

	action[<add'l switches>] <action name>[ <additional roll items>][=<target list>]

e.g.:

	action/rote perception + 3=thenomain

Switches entered by hand should override switches in the macro. For our 
system, this is as simple as making sure they're first. (roll/again=8/again=9 
will roll 8-again.)

Basic Logic:

	1. Find and objeval() the attribtue.
	2. Separate switches from the rest.
	3. Drop any =<item> from the end.
	4. @force player to roll, switches from Action first.

Easy! Right?


--------------------------------------------------------------------------------
-- action: priming command -----------------------------------------------------

Let's do some error checking here, to get it out of the way.

s: switches/entered/at/the/time
r: everything after switches, then later not including the action name
n: action name

a: attribute - action.<action name>

*/

&c.action [v( d.nr )]=$^\+?actions?(.*)$:@pemit %#=
	strcat( 
// treat 'actions' as 'action' and go from there
		setq( 0, %1 ), 

		setq( s, first( rest( %q0, / ))), 
		setq( r, if(t( %qs ), rest( %q0 ), trim( %q0 ))), 
		setq( n, first( %qr )), 
		setq( r, rest( %qr )), 

		setq( a, grab( sort( lattr( %#/action.* )), action.%qn* )), 

		case( 0, 
			t( %q0 ), u( f.action.list, %# ), 
			t( %qn ), u( .msg, Action, Action name not entered ), 
			t( %qa ), u( .msg, Action, Action '%qn' not found ), 
			u( f.action.workhorse, %#, %qa, %qs, %qr )
		)
	)

// --

@set nWoD Roller <nr>/c.action=regex


/*
--------------------------------------------------------------------------------
-- action: workhorse -----------------------------------------------------------

0: dbref of enactor
1: attribute of the macro (action.<name>)
2: switches/from/action
3: "everything else" from Action

e: evaluated content of attribute
s: switches on %qe, with / on because we've stripped it with rest(xx, /)
r: rest of %qe, drop =target

*/

&f.action.workhorse [v( d.nr )]=
	strcat(
// .. process the macro
		setq( e, objeval( %0, u( %0/%1 ))), 
		setq( s, first( rest(%qe, / ))), 
		setq( r, trim( before( if( t( %qs ), rest( %qe ), %qe ), = ))), 
		if( t( %qs ), setq( s, /%qs )), 

// .. add action stuff to the macro
		setq( r, %qr %3 ), 
		setq( s, [if( t( %2 ), /%2 )]%qs ), 

// .. error check and go
		case( 0, 
			t( %qe ), u( .msg, Action, Action has no content%, so use roll ), 
// .. 'roll' uses %qe to report errors, so we need to clear it
			[setq( e, )][trigger( tr.action, %0, %qr, %qs )]
		)
	)


/*
--------------------------------------------------------------------------------
-- trigger: the roll -----------------------------------------------------------

Because we're doing everything with functions, we need a trigger for the 
eventual @force

0: dbref of enactor
1: what to roll
2: switches

*/

&tr.action [v( d.nr )]=@force %0={ roll%2 %1 }


/*
--------------------------------------------------------------------------------
-- action.list -----------------------------------------------------------------

List all actions on %0

*/

&f.action.list [v( d.nr )]=
	strcat(
		setq( a, lattr( %0/action.* )), 
		if( t( %qa ), 
			strcat(
				header( Actions on [name( %0 )] ), %r, 
				iter( %qa, 
					strcat( 
						%b, %b, 
						ansi( h, capstr( lcstr( rest( %i0, . )))), :, %b, 
						get( %0/%i0 )
					)
					, %r 
				), %r, 
				footer( words( %qa )), 
			), 
			msg( Action, No actions on [name( %0 )] )
		)
	)


/*
--------------------------------------------------------------------------------
-- Help: Action ---------------------------------------------------------------

action\[/<switches>] <action_name> \[+|- <more items>]\[ = <send to>]

This command allows you to set up and use your own often-used rolls by setting 
them on an attribute. Any switches you use with action will override any 
switches you set on the attribute.

You may shorten <action_name> to the closest unique name. Due to coding 
shortcuts, you must put a space after <action_name> if anything follows it.

&action.<action_name> me=<roll format>

e.g.: 
  &action.perception me=/again=9 Wits + Composure

You may also add code to the attribute. For instance, the perception rolls for 
werewolves depend upon their form.

e.g.: 
  &form me=gauru
  &action.perception me=Wits + Composure + [case(v(form), gauru, 3, ...)]

action: Typed alone will list which action macros you've set.

[ansi(h, See Also)]: +help roll

*/

