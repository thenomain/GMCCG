/*
################################################################################
## XP COST DATABASE ############################################################

Update 18.06.2017: 

The pressure for spending "flavored" XP has come to a head. Mage has Arcane XP 
that may only be used for certain things. Hunter, Promethean, Demon, and so on.

This is kept in '&d.xp_types' in 4c, and so should be called 'xp type'. If I 
accidentally type 'flavor' please note that these are interchangible. 'Normal' 
is the default XP type and must never be removed.

--

Thoughts:

xp costs need 'xp type' passed to them only if it's not normal, but 'normal' may 
also be passed. 

Some traits have different costs if you use Normal XP versus another kind of XP. 
The system knows that an XP cost of '0' means it cannot be purchased, so trying 
to buy with an incorrect XP cost will fail.

Other traits can be bought with either normal or flavored XP equally. 

Or, worst of all, a mix of both.

	xp/spend gnosis=4/8 normal, 12 arcane
	xp/spend gnosis=4, 8 normal, 12 arcane
	xp/spend gnosis=4/8 normal, 12 arcane
	xp/spend gnosis=4, 8/12
	xp/spend gnosis=4, 8 n/12 a

--

xp.<stat category>
xp.<specific stat path>

xp.<stat category>~<template>
xp.<specific stat path>~<template>


If there's no general or no specific, it cannot be bought.
If the XP path's value is set to 0, it cannot be bought.

Buying stats must also follow Prerequeisites.

Following is sent from XP: 
	%0: dbref of sheet
	%1: from
	%2: to
	%3: name of stat, sans instance
	%4: value.list.of.statpath

--

The exceptions would be much easier if we could break them down by template!
Perhaps:
	xp.merit.contacts~changeling

Or the like? So:

	udefault( xp.<statpath>~<template>, 
		udefault( xp.<category>~<template>, 
			udefault( xp.<statpath>, 
				u( xp.<category> )
			)
		)
	)

Might be easier:
	setq( x, 
		case( 
			hasattr( xp.<statpath>~<template> ), xp.<statpath>~<template>, 
			hasattr( xp.<category>~<template> ), xp.<category>~<template>, 
			hasattr( xp.<statpath> ), xp.<statpath>, 
			hasattr( xp.<category> ), xp.<category>, 
			
		)
	)
	
	u( %qx, ... )

We end up not doing this. Maybe we should.



================================================================================
== SETUP =======================================================================
*/

@create XP Cost Database <xpcd>=10
@set XP Cost Database <xpcd>=inherit safe
@force me=&d.xpcd me=search( name=XP Cost Database <xpcd> )

@fo me=@parent XP Cost Database <xpcd>=[v( d.codp )]
&prefix.calculations XP Cost Database <xpcd>=cost.
&prefix.xp_costs XP Cost Database <xpcd>=xp.

@force me=&d.dd XP Cost Database <xpcd>=[search( name=Data Dictionary <dd> )]
@force me=&d.sfp XP Cost Database <xpcd>=[search( name=Stat Functions Prototype <sfp> )]





/*
================================================================================
== LMAX/LMIN ===================================================================

This version of lmax/lmin would need wiz-privileged, and I don't feel like exposing it to side-effect functions

At this point the game should have lmax() and lmin() anyhow.
*/

&.lmax [v( d.xpcd )]=fold( .lmax.fold, %0 )
&.lmax.fold [v( d.xpcd )]=max( %0, %1 )

&.lmin [v( d.xpcd )]=fold( .lmin.fold, %0 )
&.lmin.fold [v( d.xpcd )]=min( %0, %1 )

&.between [v( d.xpcd )]=
	cand( gte( %0, min( %1, %2 )), lte( %0, max( %1, %2 )))
&.between_else [v( d.xpcd )]=
	cand( gt( %0, min( %1, %2 )), lt( %0, max( %1, %2 )))




/*
================================================================================
== CALCULATION FUNCTIONS =======================================================
*/

&.value [v( d.xpcd )]=u( v( d.dd )/.value, %0, %1, %2, %3 )
&.at_least [v( d.xpcd )]=u( v( d.dd )/.at_least, %0, %1, %2, %3 )
&.is [v( d.xpcd )]=u( v( d.dd )/.is, %0, %1, %2, %3 )
&.is_full [v( d.xpcd )]=u( v( d.dd )/.is_full, %0, %1, %2, %3 )

// Value Full is not working properly! Find out why sometime.
&.value_full [v( d.xpcd )]=u( v( d.dd )/.value_full, %0, %1, %2, %3 )



/*
================================================================================
== COSTS CALCULATIONS ==========================================================

For all of these:

	0: xp cost
	1: from
	2: to
	3: stat's numeric value list (e.g., 2.4)
	4: slush, anything else that the calling 'xp.<attr>' needs to pass


--------------------------------------------------------------------------------
-- nWoD Standard XP Cost -------------------------------------------------------

We aren't using this for nWoD2, but it's left in here for historical value.

	( L² - F² + F + L ) / 2

think [setq(f, 3)][setq(t, 4)][setq(x, 2)][setq(f, inc(%qf))][mul(add(power(%qt, 2), -[power(%qf, 2)], %qf, %qt), .5, %qx)]

--

&cost.standard [v( d.xpcd )]=
	mul( 
		add( 
			power( %2, 2 ), 
			mul( power( inc( %1 ), 2 ), -1 ), 
			inc( %1 ), 
			%2 
		), 
		.5, 
		%0 
	)


--------------------------------------------------------------------------------
-- nWoD Single-Cost XP Cost ----------------------------------------------------

This is the nWoD2 stat system.

think [setq(f, 4)][setq(t, 5)][setq(x, 8)][mul(%qx, sub(%qt, %qf))]

*/

&cost.standard [v( d.xpcd )]=mul( %0, sub( %2, %1 ))


/*
--------------------------------------------------------------------------------
-- Changeling Contracts-With-Instances Costs -----------------------------------

Here for example reasons.

A little back-and-forth, here. Hopefully will unknot it.
Used for contracts that have an instance, such as Elements (<fill in blank>).

This only works 1 dot at a time, so we need to hit it a number of times
We concentrate on the 'to' numbers.  1 -> 3 would look at 2 then 3.

--

&cost.contract-with-instance [v( d.xpcd )]=
	ladd( iter( 
		lnum( inc( %1 ), %2 ), 
		case( 1, 
			lte( %i0, 
				u( .lmax, 
					iter( lattr(%0/_contract.%4_(*) ), first( u( %0/%i0 ), . ))
				)
			), 
// "semi-affinity" on the half-price rule rounds up
// (most of this is a Darkwater house rule)
			ceil( fdiv( u( xp.contract, %0, dec( %i0 ), %i0, %3 ), 2 )), 
			u( xp.contract, %0, dec( %i0 ), %i0, %3 )
		)
	))

*/

