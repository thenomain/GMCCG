/*

*** NOTES ABOUT TIMED XP SPENDS: Not implemented ***

Timed XP Spends: Cannot raise something based on various criteria.

Almost Everything: 1 level/mo
Supernatural Tollerance: 1 level/2 mos
Embed/Exploit: I don't even ...
	3 Embeds/Exploits per month, no more than 2 of each
Social Merits do not have to begin at one dot when appropriate to IC situations
Status and Mystery Cult Initiation cannot be raised for 30 days 
	after character approval

&timer.<statpath> [v( d.xpas )]=<timer nonsense>



================================================================================
== SETUP =======================================================================
*/

&prefix.timers [v( d.xpcd )]=timer.


/*
================================================================================
== SQL =========================================================================

	target: The person to whom this applies
	enactor: The person (or machine) doing this

	log_time: The time this is happening
	
	xp_type: Where is the xp coming from/going?
	xp_amt: Amount of XP applied to character ('spend' must be negative, e.g.)

	trait_category: Merit? Gift? (First part of statpath.) Used for spends.
	trait_name: The rest of the statpath. Used for spends.
	trait_value: Value set or added. Used for spends.
	trait_value_old: Value before it was set or added to. Used for spends.

	action: gain, spend, freebie, auto, <others to follow>
	reasoning: Content for this. VAGUELY OPTIONAL


--------------------------------------------------------------------------------
-- SQL Insert: Add by Auto-Award System ----------------------------------------

0: target dbref
1: enactor dbref
2: xp type (probably 'normal')
3: xp amt

*/

&sql.insert.daily-auto [v( d.xpas )]=
	INSERT 
		INTO xp_log (
			target_objid, target_name, 
			enactor_objid, enactor_name, 
			xp_type, xp_amt, action, reason
		) 
		VALUES (
			'[u( .objid, %0 )]', '[u( f.sql.escape, name( %0 ))]', 
			'[u( .objid, %1 )]', 'Auto-Experience System <xpas>', 
			'%2', %3, 'auto', 'Daily Auto'
		)


/* 
--------------------------------------------------------------------------------
-- SQL Insert: Award to XP Log -------------------------------------------------

0: target dbref
1: enactor dbref
2: xp type (probably 'normal')
3: xp amt
4: reason

We don't use trait_* for awards.

*/

&sql.insert.award [v( d.xpas )]=
	INSERT 
		INTO xp_log (
			target_objid, target_name, 
			enactor_objid, enactor_name, 
			xp_type, xp_amt, 
			action, reason
		) 
		VALUES (
			'[u( .objid, %0 )]', '[u( f.sql.escape, name( %0 ))]', 
			'[u( .objid, %1 )]', '[u( f.sql.escape, name( %1 ))]', 
			'%2', %3, 
			'gain', '%4'
		)
			
			
/* 
--------------------------------------------------------------------------------
-- SQL Select: Get XP Log of One Type for One Character ------------------------

A summary used for xp/log.

0: target dbref
1: xp type (normal, player, etc.)
2: log type (spend, freebie, gain, etc.) [optional]
3: partial stat name [optional], meaingful for log types 'spend' and 'freebie'

If no log type is entered, do not show 'auto', the daily auto gain system,
because it is spammy as all get-out.

'all' is the keyword to include it.

*/

&sql.select.type-character [v( d.xpas )]=
	SELECT entry_num, enactor_objid, enactor_name, log_time, xp_amt, 
	action, reason, trait_name, trait_value 
	FROM xp_log 
	WHERE target_objid='[u( .objid, %0 )]' 
	AND xp_type='[lcstr( %1 )]' 
	[case( %2, 
		all, @@( show all ), 
		@@( null ), AND action!='auto', 
		AND action='%2'
	)] 
	[if( strlen( %3 ), 
		AND trait_name LIKE '[edit( %3, %b, _ )]%%%%' 
	)]


/* 
--------------------------------------------------------------------------------
-- SQL Select: Get XP Log of One Entry Number ----------------------------------

A detail used for xp/log.

0: entry_num

*/

&sql.select.entry_num [v( d.xpas )]=
	SELECT 
		enactor_objid, enactor_name, target_objid, target_name, log_time, 
		xp_amt, action, reason, trait_category, trait_name, 
		trait_value, xp_type, trait_value_old 
	FROM xp_log 
	WHERE entry_num=%0


/*
--------------------------------------------------------------------------------
-- SQL Insert: Spend Some Experience -------------------------------------------

0: target dbref
1: enactor dbref (may be the same)
2: xp type (probably 'normal')
3: xp amt
4: full statpath (with instance)
5: reason (probably 'statname old -> new') 
6: value set/added
7: value coming from

*/

&sql.insert.spend [v( d.xpas )]=
	INSERT 
		INTO xp_log (
			target_objid, target_name, 
			enactor_objid, enactor_name, 
			xp_type, xp_amt, 
			trait_category, trait_name, trait_value, trait_value_old, 
			action, reason
		) 
		VALUES (
			'[u( .objid, %0 )]', '[u( f.sql.escape, name( %0 ))]', 
			'[u( .objid, %1 )]', '[u( f.sql.escape, name( %1 ))]', 
			'%2', %3, 
			'[lcstr( first( %4, . ))]', '[lcstr( rest( %4, . ))]', '%6', '%7', 
			[if( eq( %3, 0 ), 'freebie', 'spend' )], 
			'%5'
		)


/*
--------------------------------------------------------------------------------
-- SQL Select: Most Recent Touch of Trait for Objid ----------------------------

Checks either trait cateogry (first part of statpath) 
or trait name (entire statpath). Returns most recent ("latest") date.

Using LIKE so we can search for, e.g., any "Merit.Status_(%)" 
or "Skill.Academics.%".

Without trait name, searches only trait category.

--

0: target dbref
1: full statpath (trait name may use % and _ for wildcards, and is optional)

*/

&sql.select.last-touched [v( d.xpas )]=
	SELECT MAX( log_time ) 
	FROM xp_log 
	WHERE target_objid = '[u( .objid, %0 )]' 
	AND trait_category = '[lcstr( first( %1, . ))]' 
	AND trait_name LIKE 
		'[if( strlen( rest( %1, . )), lcstr( rest( %1, . )), %% )]'; 
