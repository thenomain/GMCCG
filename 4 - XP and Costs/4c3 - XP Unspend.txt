/*
================================================================================
== UNSPEND =====================================================================

* Check unspend is for 'normal' xp only (to start)
	- Never for 'player' xp. Once that's converted, that's it.
* Add new log entry for 'unspend' and relate it to the old 'spend/freebie'.
* Add beats from table to offset in &_special.beats.<type>
* Call it a day

Wizard-only. Be more careful, staffers!

	xp/unspend <entry num> for <reason>

--

NOTE: Unspending "xp/deduct" spends

We've added a new kind of spend command: xp/deduct. This command allows wizards 
to spend experiences from characters without raising stats. A statless spend, 
for games and situations where you can spend on non-sheet-related items.

Unspending this kind of spend still means removing the spend and noting the log, 
but without manipulating sheet-related stats. That is, this rather convoluted 
stat system is no longer involved, except to keep track of some numbers.

--

e: entry num, as entered
r: reason, as entered

l: sql log of 'entry_num = %qe'
o: target objid
d: target dbref
0: entry_num matching existing 'unspend' (if any)

a: action
t: xp type

s: xp (beats) spent
b: current ('normal') beats on target (%qd)

z: changed traits? (did the original spend change a sheet trait?)

1: stat category
2: stat name
p: stat path ('category.name')
// 3: new 'beats' attribute contents
c: stat class
v: logged stat value added/changed to, from sql log (%ql, trait_value)
x: current stat value, from target (%qd, statpath)

m: modified value (%ql, trait_value_old, '!<added thing>' for list types)

3: unspend log entry insert (from sql())
4: unspend log reference insert (from sql())
5: new 'beats' attribute contents
6: attempt at setstat( %qd/<stat>, %qm )

*/

&c.xp/unspend [v( d.xpas )]=$^\+?xp/unspend(.*)$:
	@assert isstaff( %#, wizard )={ 
		@pemit %#=u( .msg, xp/unspend, Wizard only ) 
	}; 

	@assert sql( select 1 )={ 
		@pemit %#=
			u( .msg, xp/unspend, SQL connection is down%; unspend not processed )
	}; 

	think strcat( 
		entry num:, setr( e, first( %1 )), %r, 
		reason:, setr( r, trim( rest( %1, for ))), %r, 
	); 

	@assert cand( isint( %qe ), gt( %qe, 0 ))={
		@pemit %#=u( .msg, xp/unspend, Entry num must be postitive integer ) 
	}; 

	@assert strlen( %qr )={ 
		@pemit %#=u( .msg, xp/unspend, Must include a reason ) 
	}; 

// check for information about xp_log and the target
	think strcat( 
		sql log:, setr( l, sql( u( sql.select.entry_num, %qe ), `, | )), %r, 
		target objid:, setr( o, elements( %ql, 3, | )), %r, 
		target dbref:, setr( d, first( %qo, : )), %r, 
		unspent?:, setr( 0, sql( u( sql.select.unspend.check, %qe ))), %r, 
	); 

	@assert strlen( %ql )={ 
		@pemit %#=u( .msg, xp/unspend, No such entry number found ) 
	}; 

	@assert not( strmatch( %ql, #-* ))={ 
		@pemit %#=u( .msg, xp/unspend, 
			Initial SQL query failed - please contact a coder 
		) 
	}; 

	@assert cand( isdbref( %qd ), strmatch( %qo, u( .objid, %qd )))={ 
		@pemit %#=u( .msg, xp/unspend, Target no longer exists ) 
	}; 

	@assert not( %q0 )={ 
		@pemit %#=u( .msg, xp/unspend, 
			This has already been unspent in 'xp/log %q0' 
		); 
	}; 

// check that the action and xp type are valid
	think strcat( 
		action:, %b, setr( a, elements( %ql, 7, | )), %r, 
		xp type:, %b, setr( t, elements( %ql, 12, | )), %r, 
	); 

	@assert cor( strmatch( %qa, spend ), strmatch( %qa, freebie ))={ 
		@pemit %#=u( .msg, xp/unspend, 
			Action is '%qa'%; must be 'spend' or 'freebie' 
		) 
	}; 

	@assert strlen( setinter( %qt, v( d.unspend.allowed_types )))={ 
		@pemit %#=u( .msg, xp/unspend, 
			XP type is '%qt'%; must be 
			[itemize( iter( v( d.unspend.allowed_types ), '%i0' ), , or )]
		) 
	}; 

// everything else is okay; display basic info
	think strcat( 
		xp (beats) spent:, setr( s, elements( %ql, 6, | )), %r, 
		current beats:, setr( b, get( %qd/_special.beats.%qt )), %r, 

		changed traits?:, setr( z, t( elements( %ql, 10, | ))), %r, 

		stat category:, setr( 1, elements( %ql, 9, | )), %r, 
		stat name:, setr( 2, elements( %ql, 10, | )), %r, 
		statpath:, setr( p, %q1.%q2 ), %r, 
		stat class:, setr( c, ulocal( v( d.sfp )/f.get-class, %qp )), %r, 

		logged value:, setr( v, elements( %ql, 11, | )), %r, 
		current value:, setr( x, ulocal( .value, %qd, %qp )), %r, 
		modified value:, 
		setr( m, 
			udefault( f.xp/unspend.%qc, 
				#-1 I don't know how to unspend that kind of stat, 
				%qx, %qv, 
				elements( %ql, 13, | )
			)
		), %r, 
	); 

	@assert not( strmatch( %qm , #-* ))={ 
		@pemit %#=u( .msg, xp/unspend, rest( %qm )); 
	}; 

// display
	@pemit %#=if( t( %qz ), 
		u( display.unspend.stat ), 
		u( display.unspend.nostat )
	);

// record into 'xp_log' and 'xp_log_unspend'
	think strcat( 
		start:, u( f.transaction.begin ), %r, 
		log entry:, setr( 3, 
				sql( u( sql.insert.unspend.log, 
					%qd, %#, %qt, %qs, %qp, u( f.sql.escape, %qr ), %qm, %qv 
				)) 
		), %r, 
		reference:, setr( 4, 
			if( not( strmatch( %q3, #-* )), 
				sql( u( sql.insert.unspend.reference, %qe )), 
				#-1 log entry failed 
			)
		), %r, 
		commit:, u( f.transaction.end ), %r, 
	); 

	@break strmatch( %q3, #-* )={ 
		@pemit %#=u( .msg, xp/unspend, 
			Error logging unspend%; unspend canceled 
		)
	}; 

// apply beats
	think strcat( 
		set beats:, setr( 5, 
			set( %qd, 
				_special.beats.%qt:
				[cat( first( %qb ), add( rest( %qb ), %qs ))] 
			)
		), %r, 
	); 

	@if strmatch( %q5, #-* )={ 
		@pemit %#=u( .msg, xp/unspend, 
			I tried to '&_special.beats.%qt %qd=
			[cat( first( %qb ), add( rest( %qb ), %qs ))]' %([name( %qd )]%) 
			but an error ocurred. Please set this properly or this character 
			will not have the refund as recorded. 
		) 
	}; 

	think if( t( %qz ), 
		strcat( 
			set trait:, setr( 6, setstat( %qd/[rest( %qp, . )], %qm )), %r, 
		)
	);

	@if cand( t( %qz ), strmatch( %q6, #-* ))={ 
		@pemit %#=u( .msg, xp/unspend, 
			I tried to 'setstat %qd/[rest( %qp, . )]=%qm', but I got the 
			message: [rest( %q6 )]. Please set this properly or this character 
			will still have their refunded stat. 
		)
	}; 

// --

@set v( d.xpas )/c.xp/unspend=regex
@set v( d.xpas )/c.xp/unspend=no_parse


/* 
--------------------------------------------------------------------------------
-- Display: Unspend from 'xp/spend', with stats --------------------------------
*/

&display.unspend.stat [v( d.xpas )]=
	strcat( 
		header( 
			Unspend: [statname( %q2 )] \[[capstr( %q1 )]\], 
			width()
		), %r, 

// .. stat change
		ansi( h, statname( %q2 )), : '%qx' -> ', 
		udefault( display.xp/unspend.%qc, %qm, %qx, %qm ), ', 
		%r%r, 

// .. refund amt
		Refunding, %b, 
			case( %qa, 
				freebie, no Exp %(freebie%), 
				strcat( 
					div( %qs, v( d.beat-to-exp )), %b, 
					if( not( strmatch( %qt, normal )), %qt%b ), 
					Exp, %b, 
					%(, u( .plural, floor( %qs ), Beat, Beats ), %), 
				)
			), %b, 
			if( strmatch( %qd, %# ), you, to [name( %qd )] ), %b, 
			for reason '%qr', 
		%r, 
		footer( %qe, width())
	)


/* 
--------------------------------------------------------------------------------
-- Display: Unspend from 'xp/deduct', no stats ---------------------------------
*/

&display.unspend.nostat [v( d.xpas )]=
	strcat( 
		header( Unspend Without Stat, width()), %r, 

// .. refund amt
		Refunding, %b, 
			div( %qs, v( d.beat-to-exp )), %b, 
			if( not( strmatch( %qt, normal )), %qt%b ), 
			Exp, %b, 
			%(, u( .plural, floor( %qs ), Beat, Beats ), %), %b, 
			if( strmatch( %qd, %# ), you, to [name( %qd )] ), %b, 
			for reason '%qr', 
		%r, 
		footer( %qe, width())
	)


/*
--------------------------------------------------------------------------------
-- xp/unspend: Allowed Types ---------------------------------------------------

What kind of xp types are we allowed to unspend?

*/

&d.unspend.allowed_types [v( d.xpas )]=normal story


/*
--------------------------------------------------------------------------------
-- xp/unspend: Unspend Checks --------------------------------------------------

This section does not (repeat NOT) check for the validity of the end result. 
This is especially important for the 'list' class of stats.

numeric: 
	'<value> + 0' is how we can force both values to be '0' if null, 
	but return null if 0

list:
	original value is not considered here; 'list' type stats can be unspent out 
	of order. it would be up to the enactor to make sure that this doesn't 
	invalidate something else.

*/


&f.xp/unspend.numeric [v( d.xpas )]=
	if( strmatch( add( %0, 0 ), add( %1, 0 )), 
		trim( %2, 0, l ), 
		#-1 Current value different than added value 
	)

// &display.xp/unspend.numeric [v( d.xpas )]=%0

&f.xp/unspend.list [v( d.xpas )]=
 	if( t( match( %0, %1, . )), 
		!%1, 
		#-1 Added value does not exist in current list 
	)

&display.xp/unspend.list [v( d.xpas )]=
	ldelete( %0, match( %0, rest( %1, ! ), . ), . ) 


/*
--------------------------------------------------------------------------------
-- xp/unspend: Unspend Lookup Table --------------------------------------------

I am going to have to add a second table to link the 'entry num' of the 
spend/freebie to the 'entry num' of the unspend. If such a link exists, then do 
not let a second unspend go through.

Don't allow the 'spend' (or 'freebie') in the parent table (xp_log) if there is 
an associated 'unspend'. Allow the system to delete an 'unspend' regardless. So 
if for an unlikely reason, a 'spend' needs deleted from the table, delete its 
'unspend' first.

--

DROP TABLE IF EXISTS xp_log_unspend;

CREATE TABLE IF NOT EXISTS xp_log_unspend ( 
    entry_num_spend BIGINT UNSIGNED NOT NULL, 
    entry_num_unspend BIGINT UNSIGNED NOT NULL, 

    PRIMARY KEY (entry_num_spend, entry_num_unspend), 

    FOREIGN KEY (entry_num_spend) 
        REFERENCES xp_log (entry_num) 
        ON DELETE RESTRICT 
        ON UPDATE CASCADE, 
    FOREIGN KEY (entry_num_unspend) 
        REFERENCES xp_log (entry_num) 
        ON UPDATE CASCADE 
) ENGINE=INNODB; 


--------------------------------------------------------------------------------
-- SQL Insert: Unspend Some Experience -----------------------------------------

0: target dbref
1: enactor dbref (may be the same)
2: xp type (probably 'normal') - must be 'normal' for now, by rules above
3: xp amt
4: full statpath (with instance)
5: reason
6: new value set/reduced
7: old value before unspend

do not forget to 'start transaction'

*/

&sql.insert.unspend.log [v( d.xpas )]=
	INSERT 
		INTO xp_log (
			target_objid, target_name, 
			enactor_objid, enactor_name, 
			xp_type, xp_amt, 
			trait_category, trait_name, trait_value, trait_value_old, 
			action, reason
		) 
		VALUES (
			'[u( .objid, %0 )]', '[u( f.sql.escape, name( %0 ))]', 
			'[u( .objid, %1 )]', '[u( f.sql.escape, name( %1 ))]', 
			'%2', %3, 
			'[lcstr( first( %4, . ))]', '[lcstr( rest( %4, . ))]', '%6', '%7', 
			'unspend', 
			'%5'
		)

// apply the entry_num here:

&sql.insert.unspend.reference [v( d.xpas )]=
	INSERT 
		INTO xp_log_unspend (entry_num_spend, entry_num_unspend) 
		VALUES (%0, LAST_INSERT_ID( ))

// do not forget to 'f.transaction.begin' and 'f.transaction.end'

/* 

(reset the auto-incremented value of a column in a mySQL table)
SET @a=0;
UPDATE test_table SET id=(@a:=@a+1);
SELECT @a; 

*/

&sql.select.unspend.check [v( d.xpas )]=
	SELECT entry_num_unspend 
		FROM xp_log_unspend 
		WHERE entry_num_spend=%0
