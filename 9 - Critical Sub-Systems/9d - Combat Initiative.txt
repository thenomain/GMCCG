/*
init

================================================================================
== NOTES =======================================================================

"Initiative roster"

1d10 + Dexterity + Composure + Fast Reflexes + readied weapon's Initiative

No Willpower can be spent in Init or Surprise.

Health penalties apply to Init.

In the event of a tie between two characters, she with the highest Initiative 
trait goes first. If both Initiative traits are the same, roll a die for each 
with the highest roll going first.

Surprise: Wits + Composure (reflexive), fail means surprised, exceptional means 
nobody is surprised

"Delaying action changes the number to when the action is taken. If two or more 
characters delay their actions till the same moment in a turn, resolve their 
order as if their Initiative totals are tied.

"A delayed action can be held over into the next turn for a temporary benefit. 
The delaying character sacrifices his action in the first turn (he can do 
nothing except move up to his Speed) in order to act any time he chooses in the 
next turn. Afterward, the characterâ€™s Initiative ranking returns to normal."

--

Fresh Start: Take an action to set your init value to whatever.


================================================================================
== DATA FORMAT AND CONSIDERATIONS ==============================================

&_init.<dbref>: <full init>|<character details>|<init flags>
&_init.<npc name>: <full init>|<character details>|<init flags>


-- General Layout --
	- full init: <init total><placement>.<tiebreaker>
	- character details: <init trait>.<mods>[.<real.init>]
	- flags: <flag 1> <flag 2> <flag n>


-- Attribute Name --

<dbref>/<npc name>:
	- if matches #xxx, fail
	- if matches [pmatch(<name>)], self or fail (even if staffer)
	- if else, it's an NPC name


-- Full Init --

<init total>: 
	- die roll + init trait
	- 0-padded left to 2 digits
	- grabbed with: strtrunc(<full init>, 2)

<placement>:
	- placement within the init value
	- starts as init trait
	- 0-padded left to 2 digits
	- grabbed with: mid(<full init>, 2, 2)

<tiebreaker>:
	- always rolled during roll, else is the position marker for new people
	- initial value is 10 - 1d10, so higher = earlier
	- 0-padded left to 2 digits
	- grabbed with: rest(<full init>, .)

These three things make it a sortable (hash) value, e.g. 905.03.

If someone wants to go right after 905.03 (init 9, trait 5), logically they 
should go at 906.00, but if someone is already at 906.00, the whole list has to 
be shifted back by .01.


-- Character Details --

<init trait>
	- used to calculate some stuff for the initial init position
	- stored for ease and NPCs
	- must always be there, must always be a non-zero init value

<mods>
	- dice mods for the player
	- sum of x + y - z (not stored this way)
	- stored as null if not entered or 0

<real.init>
	- optional
	- the original value of <full init>
	- set when init is delayed
	- erased when action is taken
	- original <full init> is set to new turn order if during this turn
	- original <full init> is set to <real.init> if during next turn
	- there will be much crying over this.


-- Flags --

	- set all flags that match
	- space-delimited
	- null if no flags
	- n: new init this turn (used to determine if tiebreaker needs re-rolled)
	- s: surprised
	- d: delaying action this turn
	- D: delaying action from last turn


================================================================================
== LOGIC FOR INIT (may not all be coded) =======================================

-- Starting Init --
	needs validated for security (init/start YES)
	notify "alert" staff channel or other logging
	clear all inits from the room


-- Adding Init by Any Means --
	search for all instances of &_init.<dbref>
	clear instances in all locations but existing room


-- Adding by Roll --
	<init>: Init Trait + Modifiers + Roll
	<position>: Init Trait
	<tiebreaker>: 1d10
	<flags>: adds n (for new)

	if <init><position> matches another, compare <tiebreaker>
		if <tiebreaker> matches others, re-roll <tiebreaker>
		if other person flagged "new", re-roll their <tiebreaker>
		repeat until no matches
	

-- Adding by Surprise Roll --
	rolls for surprise, wits + composure +/- modifiers
	if failed, <flags> adds s
	otherwise identical to adding by roll


-- Adding by Exact Value --
	<init>: value entered
	<position>: init trait or value entered
	<tiebreaker>: 1d10 (with logic) or value entered
	<flags>: adds n


-- Adding "Before" or "After" <Name> --
	<init>: <name>'s value
	<position>: <name>'s value +/-1
	<tiebreaker>: 01

	if new <init><position>.<tiebreaker> matches another
		add 01 to <tiebreaker> to all other matching new <init><position>


-- Turn End --
	<flags>:
		- clear all 'n'
		- if 'd', make 'D'
	notify everyone
	start over



================================================================================
== CREATE ======================================================================
*/

@create Initiative Tracker <it>=10
@fo me=&d.init me=[search( name=Initiative Tracker <it> )]
@set Initiative Tracker <it>=inherit safe

@fo me=@parent Initiative Tracker <it>=[v( d.codp )]



/*
================================================================================
== DATA ========================================================================

// 'd' is 'delayed this turn, 'D' is 'delayed from last turn', may be redundant
*/

&d.flags [v( d.init )]=new:n|surprised:s|delayed:d|turn delayed:D



/*
================================================================================
== DOT FUNCTIONS ===============================================================
*/

&.msg [v( d.init )]=ansi( h, <%0>, n, %b%1 )
&.plural [v( d.init )]=plural( %0, %1, %2  )

&.pmatch [v( d.init )]=if( strmatch( %0, me ), %#, pmatch( %0 ))

&.operand [v( d.init )]=
	case( 1, 
		strmatch( %0, #-* ), %0, 
		strmatch( %0, -* ), -, 
		+ 
	)



/*
================================================================================
== PSUDEO-MISTRESS =============================================================
*/

&c.init [v( d.init )]=$^\+?init(.*)$:@pemit %#=
	switch( setr( 0, secure( %1 )), 
		, u( c.init.default ), 
		/*, u( c.init.switch, after( first( %q0 ), / ), rest( %q0 )), 
		%b*, u( c.init.specific, trim( %q0 )), 
		u( .msg, init, Format is: init%[/<switch>%]%[ <input>%] )
	)

@set v( d.init )/c.init=regexp


/*
================================================================================
== INIT SWITCHES ===============================================================
*/

&c.init.switch [v( d.init )]=
	ifelse( 
		setr( 0, grab( lattr( %!/c.init/* ), c.init/%0* )), 
		u( %q0, %1 ), 
		u( .msg, init, 
			No such switch. Valid switches are: 
			[itemize( lcstr( iter( lattr( %!/c.init/* ), after( %i0, / ))))] 
		)
	)



/*
================================================================================
== INIT DEFAULT ================================================================

10) 1. Evil Joe (npc)                                                         
 4) 1. Thenomain (surprised)             2. Bob (npc, surprised)              
    3. Also (npc, delayed)               4. Also Also (npc, surprised)        

For the future, to indicate who's up, probably:

10) 1. Evil Joe (npc)                                                         
 4) 1. Thenomain (surprised)             => Bob (npc, surprised)              
    3. Also (npc, delayed)               4. Also Also (npc, surprised)        


l: location
i: list of init attributes
f: list of <full init>|<attribute>, sorted
c: list of <init totals> being used, sorted

z: a temp holder
*/

&c.init.default [v( d.init )]=
	strcat( 
		setq( l, loc( %# )), 
		setq( i, lattr( %ql/_init.* )), 
		setq( f, 
			revwords( 
				sort( 
					iter( %qi, 
						strcat( 
							first( get( %ql/%i0 ), | ), 
							|, %i0 
						)
					)
				)
			)
		), 
		setq( c, revwords( sort( setunion( iter( %qf, strtrunc( %i0, 2 )), )))), 

// Display
		header( Initiative Roster ), %r, 

		if( t( %qi ), 
// .. for each initiative rating
			iter( %qc, 
				wrap( 
// .. .. init:
					strcat( 
						ansi( h, [rjust( trim( %i0, l, 0 ), 2)]%) ), %b, 
						iter(
							setr( z, 
								filter( fil.display.init-total, %qf, , , %i0 )
							), 
							ljust( ulocal( 
								f.display.one-init-entry, 
								rest( %i0, | ), 
								%ql, 
								if( gt( words( %qz ), 1), [inum()].%b )
							), 36 )
							, , %r 
						), 
					), 
					74, left, @@(lefttxt), @@(righttxt), 4, @@(osep), 78 
				), , %r 
			), 
			%b No initiatives at this location.
		), 
		%r, 

		footer( 
			if( t( %qi ), 
				u( .plural, words( %qi ), initiative, initiatives )
			)
		)
	)


/*
--------------------------------------------------------------------------------
-- Filter: Display, Init Total -------------------------------------------------

Takes the <full init>|<attribute> format and returns those matching <total init>
(notice this does pretty much no checking)
*/

&fil.display.init-total [v( d.init )]=strmatch( %0, %1* )


/*
--------------------------------------------------------------------------------
-- Display: One Init entry -----------------------------------------------------

<num>. <name> (npc, surprised)

(for the future, <num>. might be replaced by ** or other "this person's turn" 
trickery.)

0: <attr>
1: location dbref
2: [inum()].<spc> from the iter (which position in the init)

d: character details: <init trait>.<mods>
f: <flags>, ignoring "n"
e: list|of|extra|notes

s: subject
a: attribute name

*/

&f.display.one-init-entry [v( d.init )]=
	localize( strcat( 
		setq( d, extract( get( %1/%0 ), 2, 1, | )), 
		setq( f, setdiff( extract( get( %1/%0 ), 3, 1, |), n )), 
		setq( e, 
			iter( %qf, 
				first( grab( u( d.flags ), *:%i0, | ), : ), 
				, | 
			)
		), 

// .. num
		%2, 
// .. name
		if( isdbref( setr( s, rest( %0, . ))), 
			name( %qs ), 
			strcat( 
				setq(e, npc|%qe), 
				titlestr( edit( %qs, _, %b ))
			)
		), 
// .. extras
		if( t( %qe ), 
			ansi( xh, %b%([iter( trim( %qe, b, | ), %i0, |, %,%b )]%) )
		)
	))

// --

think u( v( d.init )/f.display.one-init-entry, _init.%#, loc(me), 1. )
think u( v( d.init )/f.display.one-init-entry, _init.evil_joe, loc(me), 2. )
think u( v( d.init )/f.display.one-init-entry, _init.also_also, loc(me), 3. )



/*
================================================================================
== INIT SPECIFIC ===============================================================

Init-specific is init-default; ignores 'init <foo>'

*/

&c.init.specific [v( d.init )]=u( c.init.default )



/*
================================================================================
== INIT/CLEAR ==================================================================

Clear the init roster in preparation to start combat. 
If staff, do it, else ask for 'init/clear YES'.

1) clear all _init for current location
2) Notice to Monitor

*/

&c.init/clear [v( d.init )]=
	switch( 1, 
		not( cor( isapproved( %# ), isstaff( %# ))), 
		u( .msg, init/clear, Must be approved to clear an initiative roster ), 

		not( cor( isstaff( %# ), not( comp( %0, YES )))), 
		strcat( 
			u( .msg, 
				If you're sure you want to clear the roster%, type: 
				init/clear YES
			), 
			oemit( %#, 
				u( .msg, init, 
					%N may be clearing initiatives at this location 
				)
			)
		), 

// ok go
		strcat( 
// .. grab info
			setq( l, loc( %# )), 

// .. notify staff
//			monitor( init/clear: %N at [name(loc(%#))] %([loc(%#)]%) ), 

// .. clear inits
			iter( lattr(%ql/_init.*), set(%ql, %i0:), , @@ ), 

// .. notify everyone
			remit( %ql, 
				u( .msg, init, 
					%N clears the initiative roster in this location 
				)
			), 
		)
	)



/*
================================================================================
== INIT/SET ====================================================================

init/set <subject>[/<init trait>]=<init total>[ <list> <of> <flags>]

0: <subject>=<value>

s: subject
t: init total
i: init trait, if any (0 if npc and unset, ignored if PC)
n: new init flags
f: final init flags

*/

&c.init/set [v( d.init )]=
	strcat( 

// set things
		setq( s, trim( before( %0, = ))), 
		setq( i, rpad( trim( rest( %qs, / )), 2, 0 )), 
		setq( s, ulocal( f.validate.init-subject, before( %qs, / ), %# )), 

		setq( t, rest( %0, = )), 
		setq( n, 
			iter( rest( %qt ), rest( grab( u( d.flags ), %i0*:*, | ), : ))
		), 
		setq( t, rpad( trim( first( %qt )), 2, 0 )), 

		setq( f, 
			setunion( 
				cat( 
					%qn, 
					extract( rest( get( loc( %# )/_init.%qs ), | ), 3, 1, . )
				), 
			)
		), 

		case( 1, 
// .. name validation returned error
			not( %qs ), 
			u( .msg, init/set, rest( %qs )), 

// .. validate <init total>
			cor( gt( %qt, 99 ), lt( %qt, 1 )), 
			u( .msg, init/set, New initiative must be between 1 and 99 ), 

// .. dbref & approved: Player/Self
			cand( isdbref( %qs ), isapproved( %qs )), 
			strcat( 
				setq( i, rpad( getstat( %qs/initiative ), 2, 0 )), 
				ulocal( f.init.add.new, %qs, loc( %# ), %qt%qi, %qi.0, %qf ), 
				u( f.clean-dbref, %# ), 

				remit( loc( %# ), 
					u( .msg, init, 
						%N directly set %oself on the initiative roster 
						at [trim( %qt, l, 0 )] 
					)
				)
			), 

// .. not-dbref == not pc == NPC
			not( isdbref( %qs )), 
			strcat( 
				ulocal( f.init.add.new, %qs, loc( %# ), %qt%qi, %qi.0, %qf ), 

				remit( loc( %# ), 
					u( .msg, init, 
						%N directly set '[titlestr( %qs )]' 
						on the initiative roster 
						at [trim( %qt, l, 0 )]
					)
				)
			), 

// .. else error: dbref & not approved
			u( .msg, init/set, Must be approved to set your own init )
		)
	)

// --

init/set bob/7=4


/*
--------------------------------------------------------------------------------
-- Validate: Init Subject ------------------------------------------------------

If setting dbref, only if matches %#.
If setting name, cannot pmatch() any existing name

0: input
1: %#
t: target
returns: dbref if pc, name if npc, #-1 if not allowed

*/

&f.validate.init-subject [v( d.init )]=
	localize( strcat( 
		setq( t, u( .pmatch, if( %0, %0, %1 ))), 
		case( 1, 
			strmatch( %qt, %1 ), %qt, 
			not( valid( attrname, edit( %0, %b, _ ))), 
			#-1 That's Not a Good Name, 

			not( %qt ), 
			%0, 

			#-1 Subject Must Be Self or Not a Player
		)
	))

// --

think u( v( d.init )/f.validate.init-subject, ms. rook, %# )
think u( v( d.init )/f.validate.init-subject, thenomain, %# )
think u( v( d.init )/f.validate.init-subject, flabbert, %# )
think u( v( d.init )/f.validate.init-subject, mr. briggs, %# )
think u( v( d.init )/f.validate.init-subject, eat:moar:chicken, %# )


/*
--------------------------------------------------------------------------------
-- Clean Dbref -----------------------------------------------------------------

If someone sets their init in a new location, their inits from older locations 
should be removed as a precaution.

0: dbref of player setting init

*/

&f.clean-dbref [v( d.init )]=
	iter( 
		setdiff( 
			search( eroom=hasattr( ##, _init.%0 )), 
			loc( %0 )
		), 
		set( %i0, _init.%0: )
	)

// --

think u( v( d.init )/f.clean-dbref, %# )


/*
--------------------------------------------------------------------------------
-- Init: Add New ---------------------------------------------------------------

This is going to be a pain. Sets a passed init for X as if new.

0: <name> or <dbref>, already validated
1: location dbref
2: Most of position: <init total><init stat>
3: Most of character info: <init stat>.<modifier total>
4: extra flags to set with 'n'

Needs to be recursive, so we prime the resolver

	_init.<dbref or npc name>: full.init|character info|flags

*/

&f.init.add.new [v( d.init )]=
	strcat( 
		set( %1, 
			_init.[edit( %0, %b, _ )]:
			%2.[u( f.init.tiebreaker-roll )]|
			%3|
			[setunion( n %4, )]
		), 

// check conflicts on the new value
		null( 
			ulocal( f.init.resolve-init-conflicts, 
				%2, %1, u( f.init.conflict-list, %2, %1 )
			)
		)
	)

// --

think u( v( d.init )/f.init.add.new, %#, %L, 0407, 07.0 )


/*
--------------------------------------------------------------------------------
-- Init: Tiebreaker Roll -------------------------------------------------------

For determining the tiebreaker. We use this enough to pull it out, here.

*/

&f.init.tiebreaker-roll [v( d.init )]=rjust( rand( 1, 10 ), 2, 0 )



/*
================================================================================
== INIT: RESOLVE INIT CONFLICTS ================================================

The purpose of this important function is to be passed a general init/place 
combination and resolve all the "die roll" tie-breakers on ONLY NEW INITS for 
that match, but for all matches for that combination.

This should come up very rarely, but it's how combat is to work, so this is the 
way we're coding it.

This works recursively.

0: <init total><init stat>
1: location dbref
2: conflicting dbrefs

*/

&f.init.resolve-init-conflicts [v( d.init )]=
	localize(
		if( t( %2 ), 
			strcat( 
// .. change the tiebreakers on each item
				iter( %2, 
					set( %1, %i0:
						%0.
						[u( f.init.tiebreaker-roll )]|[rest( get( %1/%i0 ), | )]
					)
				), 
// .. then check the list again
				ulocal( f.init.resolve-init-conflicts, 
					%0, %1, u(f.init.conflict-list, %0, %1)
				)
			)
		)
	)

// --

think [u( v( d.init )/f.init.conflict-list, 0407, %L )] - [u( v( d.init )/f.init.resolve-init-conflicts, 0407, %L, u( v( d.init )/f.init.conflict-list, 0407, %L ))] - [u( v( d.init )/f.init.conflict-list, 0407, %L )]


/*
--------------------------------------------------------------------------------
-- Init: Conflict List ---------------------------------------------------------

0: <init total><init stat>
1: location dbref
returns: attributes that conflict ("new" flagged only?)

l: raw list of <attribute> matching %0
f: list of <full inits> that match %0
e: exact inits based on %qf
c: conflicting inits

(After determining this conflict list, filter down to the new items and re-roll them and run the conflict list again, else stop.)

*/

&f.init.conflict-list [v( d.init )]=
	localize( strcat( 
		setq( l, filter( fil.matching-inits, lattr( %1/_init.* ), , , %0, %1 )), 
		setq( f, setunion( iter( %ql, first( get( %1/%i0 ), | )), )), 

// .. for each full init, grab the match of exact inits and, 
// .. if there are more than one, add it to the conflict list
		setq( c, 
			iter( %qf, 
				[setq( e, 
					filter( fil.exact-inits, lattr( %1/_init.* ), , , %i0, %1 )
				)]
				[if( gt( words( %qe ), 1 ), 
					%qe
				)]
			)
		), 

// .. return just those inits that are "new" as those that are truly conflicted
		squish( filter( fil.init-flag, %qc, , , %1, n )), 

	))

// --

think u( v( d.init )/f.init.conflict-list, 0407, %L )


/*
--------------------------------------------------------------------------------
-- Filter: Matching Inits ------------------------------------------------------

Returns list of dbrefs whose <total><stat> inits match that passed

0: list of dbrefs
1: <total><stat> init to test against
2: dbref location

*/

&fil.matching-inits [v( d.init )]=
	strmatch( 
		%1, 
		first( get( %2/%0 ), . )
	)


/*
--------------------------------------------------------------------------------
-- Filter: Exact Inits ---------------------------------------------------------

Returns list of dbrefs whose <total><stat>.<tiebreaker> inits match that passed
(almost exactly the same code as Matching Inits, above)

0: list of dbrefs
1: <total><stat>.<tiebreaker> init to test against
2: dbref location

*/

&fil.exact-inits [v( d.init )]=
	strmatch( 
		%1, 
		first( get( %2/%0 ), | )
	)


/*
--------------------------------------------------------------------------------
-- Filter: Init Flag -----------------------------------------------------------

Returns list of dbrefs whose inits match the flag(s) passed.

0: list of dbrefs
1: dbref location
2: flag(s) to match

*/

&fil.init-flag [v( d.init )]=
	t( setinter( 
		extract( get( %1/%0 ), 3, 1, | ), 
		%2 
	))


/*
--------------------------------------------------------------------------------
-- Some Random INIT/SET Thoughts -----------------------------------------------

&_INIT.#33 here=0407.09|x.x|n s
&_INIT.BOB here=0407.09|x.x|
&_INIT.EVIL_JOE here=1003.06|03.0|n
&_INIT.ALSO here=0407.03|x.x|d
&_INIT.ALSO_ALSO here=0407.02|x.x|n s


WHAT WOULD BE BETTER:
	&_init.<subject>: <full init>|<character info>|<flags>

SO:
	&_init.#33: 0403.08|03.0|n s
	

think New: [filter( init/fil.init-flag, lattr( here/_init* ), , , num( here ), n )]

think Surprised: [filter( init/fil.init-flag, lattr( here/_init* ), , , num( here ), s )]

think Matching: [filter( init/fil.matching-inits, lattr( here/_init* ), , , 0407, num( here ))]

think Matching New: [filter( init/fil.init-flag, filter( init/fil.matching-inits, lattr( here/_init* ), , , 0407, num( here )), , , num( here ), n )]


================================================================================
== INIT/ROLL ===================================================================

init/roll <subject>[/<init value>] [<modifiers>]

<subject>: Just like init/set, NPC or player
<init stat>: For NPCs only, 0 if not set, ignored if player
<modifiers>: The +/- list, but numbers only.

Rolling implies adding new, so we go through the add-new rigamarole.

Because of the modifiers, a - anywhere but the modifiers will be taken as a modifier. This could be logic'd futher to protect things, but won't be.

0: All of that

q0: processed 0 to tweak the <modifiers>
s: subject
i: init value
h: health penalty
m: modifiers total
n: modifiers notes, if any (mostly to note wound penalty applied)
f: init flags, if they presently exist
r: roll of the dice (for display)
t: init total

Hey, past self, I have a question:
	Why are we not using the fleshed-out 'roll' code here?
	Could be worth a look, when there's time.

*/

&c.init/roll [v( d.init )]=
	strcat( 
		setq( 0, edit( %0, -, +- )), 

		setq( s, before( %q0, + )), 
		setq( i, rpad( trim( rest( %qs, / )), 2, 0 )), 
		setq( s, ulocal( f.validate.init-subject, before( %qs, / ), %# )), 

// +a + b -> a b, a+- b -> a -b. Then ladd( )
		setq( m, ladd( edit( edit( rest( %q0, + ), +, %b ), -%b, %b- ))), 
		setq( r, rand( 1, 10 )), 

		setq( f, extract( rest( get( loc( %# )/_init.%qs ), | ), 3, 1, . )), 

		case( 1, 
			not( %qs ), 
			u( .msg, init/roll, rest( %qs )), 

			or( gt( %qm, 90 ), lt( %qm, -90 )), 
			u( .msg, init/roll, Modifier total must be between -90 and 90 ), 

// dbref & approved: Player/Self
			cand( isdbref( %qs ), isapproved( %qs )), 
			strcat( 
				setq( i, rpad( getstat( %qs/initiative ), 2, 0 )), 
				if( lt( setr( h, u( %qs/_health.penalty )), 0 ), 
					[setq( m, add( %qm, %qh ))]
					[setq( n, health penalty applied )]
				), 
// .. total init, set, and display
				setq( t, rjust( add( %qi, %qr, %qm ), 2, 0 )), 
				ulocal( f.init.add.new, %qs, loc( %# ), %qt%qi, %qi.%qm, %qf ), 
				u( f.clean-dbref, %# ), 
				remit( loc( %# ), 
					u( .msg, init, 
						%N rolled %qr
						[if( t( %qm ), %b[u( .operand, %qm )] [abs( %qm )] )]%, 
						putting %oself on the initiative roster 
						at [trim( %qt, l, 0 )]
						[if( t( %qn ), %b%(%qn%))] 
					)
				)
			), 

// not-dbref == not pc == NPC
			not( isdbref( %qs )), 
			strcat( 
				setq( t, rjust( add( %qi, %qr, %qm ), 2, 0 )), 
				ulocal( f.init.add.new, %qs, loc( %# ), %qt%qi, %qi.%qm, %qf ), 
				remit( loc( %# ), 
					u( .msg, init, 
						%N rolled %qr
						[if( t( %qm ), %b[u( .operand, %qm )] [abs( %qm )] )]%, 
						putting '[titlestr( %qs )]' on the initiative roster 
						at [trim( %qt, l, 0 )]
					)
				)
			), 
// else error: dbref & not approved
			u( .msg, init/roll, Must be approved to roll your own init )
		), 
	)



/*
================================================================================
== INIT/REMOVE =================================================================

init/remove <subject>

Removes someone from the roster. Validates as usual, "null" will not remove self, must be explicit.

0: <subject>
s: subject, validated
l: location dbref
a: attribute for subject, if any

*/

&c.init/remove [v( d.init )]=
	strcat(  
		setq( s, ulocal( f.validate.init-subject, %0, %# )), 
		setq( l, loc( %# )), 

		case( 0, 
// null %0 prevents accidental self-wiping
			comp( %0,  ), 
			u( .msg, init/remove, Must enter name to remove ), 

// name validation returned error
			t( %qs ), 
			u( .msg, init/remove, rest( %qs )), 

// subject has no init attribute
			hasattr( %ql, setr( a, _init.[edit( %qs, %b, _ )] )), 
			u( .msg, init/remove, Subject has has no initiative to remove ), 

// dbref & approved, or npc: remove
			not( and( isdbref( %qs ), isapproved( %qs ))), 
			strcat( 
				set( %ql, %qa: ), 
				remit( %ql, 
					u( .msg, init/remove, 
						%N removes %oself from the initiative roster 
					)
				)
			), 

// not-dbref == not pc == NPC
			isdbref( %qs ), 
			strcat( 
				set( %ql, %qa: ), 
				remit( %ql, 
					u( .msg, init, %N removes '%qs' from the initiative roster )
				)
			), 

// else error: dbref & not approved
			u( .msg, init/remove, Must be approved to clear your own init ), 
		)
	)




/*
================================================================================
== HELP FILE ===================================================================

--------------------------------------------------------------------------------
-- Raw Help File ---------------------------------------------------------------


Combat is messy enough without forgetting who goes when. Here is a system to
keep track of everyone. It does quite a few init-related checks, such as
resolving rolled ties.

init
    Check the room's initiative roster

init/clear
    Erase the room's initiative roster. Use at the start of combat.

init/roll [<modifiers>]
    Roll your initiative, + or - modifiers.
    Health penalties at the time of the roll apply.

init/set me=<value>
    Add yourself onto the roster with a total initiative of <value>.

init/remove me
    Remove yourself from the roster.

-- STORYTELLER/STAFF COMMANDS --

init/roll <name>[/<initiative stat>][ <modifiers>]
    Roll for an NPC with an initiative stat as entered, 0 otherwise. 
    +/- <modifiers> are also numeric.

init/remove <name>
    Remove an NPC from the roster.

init/set <name>[/<initiative stat>]=<value>
    Add an NPC to the roster with a total iniative of <value>.

Staff may also use <name> here as a PC name.


--------------------------------------------------------------------------------
-- Softcode Help File ----------------------------------------------------------

&help~ic_commands~init #xxxx=Initiative Rosters

~

Combat is messy enough without forgetting who goes when. Here is a system to keep track of everyone. It does quite a few init-related checks, such as resolving rolled ties. %r
 %r
[ansi( h, init )] %r
%b %b Check the room's initiative roster %r
 %r
[ansi( h, init/clear )] %r
%b %b Erase the room's initiative roster. Use at the start of combat. %r
 %r
[ansi( h, init/roll \[<modifiers>\] )] %r
%b %b Roll your initiative, + or - modifiers. %r
%b %b Health penalties at the time of the roll apply. %r
 %r
[ansi( h, init/set me=<value> )] %r
%b %b Add yourself onto the roster with a total initiative of <value>. %r
 %r
[ansi( h, init/remove me )] %r
%b %b Remove yourself from the roster. %r
 %r
Next Page: Commands for NPCs and Staff %r

~

[ansi( h, init/roll <name>\[/<initiative stat>\]\[ <modifiers>\] )] %r
%b %b Roll for an NPC with an initiative stat as entered, 0 otherwise. %r
%b %b +/- <modifiers> are also numeric. %r
 %r
[ansi( h, init/remove <name> )] %r
%b %b Remove an NPC from the roster. %r
 %r
[ansi( h, init/set <name>\[/<initiative stat>\]=<value> )] %r
%b %b Add an NPC to the roster with a total iniative of <value>. %r
 %r
Staff may also use <name> here as a PC name.





================================================================================
== MORE RANDOM COMMENTS ========================================================

(These were probably originally notes to keep the above code smooth)


monitor(message)









Adding by Roll:
	Init
	If inits match, compare traits
	If traits match, roll the tiebreaker

Adding without Roll:
	Set init.
	If inits match, add before or after the person indicated






init/start
	Start combat. Clears all inits. Clears the room's init counter.
init/start YES
	For safety

init/clear
	Clear your init
init/clear [<player>|here]
	Staff-only, clears everyone's inits

(hm, a mix of the above?)

init
	Display the Initiative Roster

init/assign <value>: Assigns it by hand.

init/set [<init modifiers>]
	Create init for someone - needs different rules for staff/those without a sheet.
	If someone rolls init in a location, the system can clear them out from every other location.
init/surprise [<surprise modifiers>/][<init modifiers>]
	Create init for someone, as above, but rolls for surprise first.


init/next
	Current person is done with their action. When the last person's action is done, the turn is declared over and restarted.
init/end
	End the current turn. Mark everyone's action as done. (This is as an alternative to the above, so people can do one or the other, or a mix of both.)


init/delay [<value>]
	Set current person on delay, or set new init to <value>
init/undelay <value>
	Go on <value>. If it's been a turn, after this turn return to old value, else set to new value. If this turn, <value> must be lower than original value.

*/
